# vim: ts=2 sw=2 et
---
# This file describes specific host vars
hostname: heaven-pascal.youtous.dv
ipv4: # /!\ When one of the host ip is changed, playbook should be completely re-run
  - 192.168.100.10
ipv6:
  - fde4:8dba:82e1::c1
ipv4_private:
  - "192.168.100.10"
ipv6_private:
  - fde4:8dba:82e1::c1

host_users:
  - username: specu
    name: Specific user on heaven
    groups: ['users', 'sshusers', 'docker'] # TODO : check if docker group is needed
    uid: 10020
    ssh_key: "{{ specu_ssh_keys }}"
    password: "{{ specu_password }}"
    update_password: "always"
    restrict_ips: ['192.168.100.1']

### Begin of relay-smtp parameters ###

# smtp relay parameters
relay_email: monitoring-heaven-pascal@youtous.me
relay_user: "{{ relay_email }}"
relay_password: "{{ secret_relay_password }}"

### End of relay-smtp parameters ###


### Begin of database parameters ###

# mariadb client ip to use (always prefer private network)
mariadb_client_ipv4: "{{ ipv4_private }}"
mariadb_client_ipv6: "{{ ipv6_private }}"

# list of mariadb users
mariadb_users:
  - name: youtous
    host: localhost
    password: "{{ mariadb_user_youtous_passwd }}"
    # Example privileges string format
    # mydb.*:INSERT,UPDATE/anotherdb.*:SELECT/yetanotherdb.*:ALL
    priv: 'youtous.*:ALL'
    tls_requires: true # requires an SSL connection, not useful in local but useful for externals connections | or rely on wireguard
    state: present # default value
  - name: dev-arb1t3r
    host: "%" # allows connection from any host (filtered later by UFW)
    password: "poney"
    priv: 'dev-arb1t3r.*:ALL'
  - name: nextcloud
    host: "%" # allows connection from any host (filtered later by UFW)
    password: "nextcloud"
    priv: 'nextcloud.*:ALL'
  - name: teamspeak
    host: "%" # allows connection from any host (filtered later by UFW)
    password: "teamspeak"
    priv: 'teamspeak.*:ALL'

# list of databases
mariadb_databases:
  - name: youtous
  - name: dev-arb1t3r
  - name: nextcloud
  - name: teamspeak

### End of database parameters ###

### Begin of Wireguard server parameters ###

# allow VPN clients to access DNS         # <=> wireguard_server.interface.addresses
dns_allowed_hosts: "{{ local_docker_ips + ['10.99.99.1/24', 'fdc9:281f:04d7:9ee9::1/64'] }}"
# dns_allowed_hosts: "{{ local_docker_ips + wireguard_server_address }}"

wireguard_server_external_interface: eth0
wireguard_servers:
  - interface: wg0
    addresses: # server address + network
      - 10.99.99.1/24
      - fdc9:281f:04d7:9ee9::1/64
    port: "1990"
    mtu: ""
    public_key: "0dE5sNjWqFUeUFRSvI9VTNu/OXPclLB/8bmw1fqUVCc="
    private_key: "{{ wireguard_server_private_key }}"
    restrict_ips:
      - "any"
    peers: "{{ wireguard_server_peers }}"
    pre_up: []
    pre_down: []
    post_up:
      - sysctl -w net.ipv4.ip_forward=1
      - sysctl -w net.ipv6.conf.all.forwarding=1
      - "iptables -A FORWARD -i %i -j ACCEPT; iptables -A FORWARD -o %i -j ACCEPT;
        iptables -t nat -A POSTROUTING -o {{ wireguard_server_external_interface }} -j MASQUERADE"
      - "ip6tables -A FORWARD -i %i -j ACCEPT; ip6tables -A FORWARD -o %i -j ACCEPT;
         ip6tables -t nat -A POSTROUTING -o {{ wireguard_server_external_interface }} -j MASQUERADE"
    post_down:
      - "iptables -D FORWARD -i %i -j ACCEPT; iptables -D FORWARD -o %i -j ACCEPT;
         iptables -t nat -D POSTROUTING -o {{ wireguard_server_external_interface }} -j MASQUERADE"
      - "ip6tables -D FORWARD -i %i -j ACCEPT; ip6tables -D FORWARD -o %i -j ACCEPT;
         ip6tables -t nat -D POSTROUTING -o {{ wireguard_server_external_interface }} -j MASQUERADE"

  - interface: wg-elastic
    addresses: # server address + network
      - 10.101.101.1/24
    port: "1991"
    mtu: ""
    public_key: "PsC3chEjluFdDCH2DXZ2WfRMr0dcTx20l9oKRXwqVXI="
    private_key: "{{ wireguard_elastic_server_private_key }}"
    restrict_ips:
      - "192.168.100.11"
    peers: "{{ wireguard_elastic_server_peers }}"
    pre_up: []
    pre_down: []
    post_up:
      - sysctl -w net.ipv4.ip_forward=1
      # test it with `curl 10.101.101.1` from https://serverfault.com/questions/1005927/configure-wireguard-to-block-all-non-ssh-traffic
      - iptables -F wireguard-filter-elastic || true # flush existing rules
      - iptables -t filter -N wireguard-filter-elastic # create chain
      # permit anything coming from or going to port 5064 (elastic)
      - iptables -t filter -A wireguard-filter-elastic -p tcp --dport 1024:65535 --sport 5064 -m state --state ESTABLISHED -j ACCEPT
      - iptables -t filter -A wireguard-filter-elastic -p tcp --sport 1024:65535 --dport 5064 -m state --state NEW,ESTABLISHED -j ACCEPT
      # drop everything else
      - iptables -t filter -A wireguard-filter-elastic -j DROP
      # redirect the traffic to the dedicated chain
      - iptables -t filter -I FORWARD -i %i -j wireguard-filter-elastic
      - iptables -t filter -I FORWARD -o %i -j wireguard-filter-elastic
    post_down: # cleanup
      - iptables -t filter -D FORWARD -i %i -j wireguard-filter-elastic
      - iptables -t filter -D FORWARD -o %i -j wireguard-filter-elastic
      - iptables -F wireguard-filter-elastic
      - iptables -X wireguard-filter-elastic

# required for VPN server acting as a router
ipv4_ip_forwarding: "1"
ipv6_ip_forwarding: "1"

### End of Wireguard server parameters ###


### Begin of Nextcloud parameters ###
nextcloud_db_name: "nextcloud"
nextcloud_db_user: "nextcloud"
nextcloud_db_password: "nextcloud"
nextcloud_db_host: "172.18.0.1" # db on docker_gwbridge host

# Nextcloud user conf
nextcloud_admin_user: "nextcloud-admin"
nextcloud_admin_password: "set a super secure password !"

# Nextcloud smtp configuration
nextcloud_smtp_host: "localhost"
nextcloud_smtp_secure: "tls"
nextcloud_smtp_port: "587"
nextcloud_smtp_authtype: "LOGIN"
nextcloud_smtp_username: ""
nextcloud_smtp_password: ""
nextcloud_smtp_from: "nextcloud@localhost"
nextcloud_smtp_domain_from: "{{ nextcloud_domain }}"
### End of Nextcloud parameters ###

### Begin of Teamspeak parameters ###

teamspeak_db_name: "teamspeak"
teamspeak_db_user: "teamspeak"
teamspeak_db_password: "teamspeak"
teamspeak_db_host: "172.18.0.1" # db on docker_gwbridge host

### End of Teamspeak parameters ###

### Begin of docker elastic parameters ###

docker_external_interfaces: ["eth0", "eth1"]
# list of nodes (ips) allowed to submit log data
logstash_trough_vpn: ["10.101.101.2"] # vpn for logstash data exchange
logstash_external_allowed_ip4s: "{{ local_docker_ips + logstash_trough_vpn }}"

# allow docker + all nodes are allowed to send logs data, list can be completed
logstash_allowed_ip4s: "{{ local_docker_ips + nodes_ip4s_without_current_host }}"
# ipv6 docker is not yet enabled, skipping todo : when ipv6 enable it

# elastic alert configuration
elastic_alert_email_server: "{{ relay_server }}"
elastic_alert_email_port: "{{ relay_port }}"
elastic_alert_email_from: "{{ relay_user }}"
elastic_alert_email_user: "{{ relay_user }}"
elastic_alert_email_password: "{{ relay_password }}"

metricbeats_modules:
  - system
  - docker # TODO : check if docker is needed
  - mysql # enable metrics for mysql

### End of docker elastic parameters ###

### Begin of mailserver parameters ###
mailserver_ssl_type: ""
mailserver_ssl_use_traefik: false
mailserver_allowed_ips:
  port_465:
    - "172.17.0.0/16" # allow docker0 containers to access smtps
    - "172.18.0.0/16" # allow docker_gwbridge containers to access smtps
  port_993: []
mailserver_domain: youtous.dv
mailserver_hostname: mailing-heaven-pascal
mailserver_debug: true
# domains configuration
mailserver_domains:
  # Generate DKIM using : https://dkimcore.org/specification.html
  # openssl genrsa -out mail.heaven-pascal.youtous.me.priv 2048
  # openssl rsa -in mail.heaven-pascal.youtous.me.priv -pubout >mail.heaven-pascal.youtous.me.pub
  - domain: heaven-pascal.youtous.dv
    dkim_private: "{{ mailserver_heaven_pascal_dkim_private }}"
    dkim_public: "{{ mailserver_heaven_pascal_dkim_public }}"
    accounts: "{{ mailserver_heaven_pascal_accounts }}"
    aliases:
      - alias: joe@heaven-pascal.youtous.me
        to: monitoring@heaven-pascal.youtous.me
    aliases_regexp:
      - regexp: /^test[0-9][0-9]*@heaven-pascal.youtous.me/
        to: monitoring@heaven-pascal.youtous.me
    mta_sts:
      # policy lifetime positive integer up to 31557600.
      # recommended is 604800
      # testing value is 86401
      max_age: 86401
      mode: testing # choose between testing, enforce (prod) and none, use enforce after tests
      mx_entries:
        - mailing-heaven-pascal.heaven-pascal.youtous.dv # each mx entry must be listed here
### End of mailserver parameters ###

### Begin of SSL/TLS monitoring parameters ###
monitor_testssl_hosts:
  - host: "mailserver.svur.org:993"
  - host: "mailserver.svur.org:465"
  - host: "mailserver.svur.org:25"
    protocol: "smtp"
  - host: "svur.org:443"
    ipv6: true
### End of SSL/TLS monitoring parameters ###


### Begin of Backup storage parameters ###
backup_frozen_directory: "/home/frozen-backups/"
# backup_storage parameters
backup_users:
  - username: heaven-roberval # final username will be prefixed by backup_
    restrict_ips: "{{ hostvars['heaven-roberval.youtous.dv']['ipv4'] + hostvars['heaven-roberval.youtous.dv']['ipv6'] }}"
    # specify host public keys
    ssh_keys:
      - "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIH6vcZbXLfRAj2g8RvdU2RRc/EYsMtLZTMEPhvDkAEir root@heaven-roberval.youtous.dv"
  - username: heaven-pascal
    restrict_ips: "{{ hostvars['heaven-pascal.youtous.dv']['ipv4'] + hostvars['heaven-pascal.youtous.dv']['ipv6'] }}"
    # specify host public keys
    ssh_keys:
      - "{{ root_public_key }} root@heaven-pascal.youtous.dv"

### End of Backup storage parameters ###


### Begin of Backup strategy parameters ###

# deploy generated ssh keys for root
users_ssh_keys:
  - username: root
    public_key: "{{ root_public_key }}"
    private_key: "{{ root_private_key }}"

# backup strategy (see role for more details)
global_backup_gpg_public_key:
  name: 8DD9CF31319D84D9 # get the name using `gpg --list-secret-keys --keyid-format LONG`, pick the SUB-KEY (ssb)
  key: "{{ secret_backup_gpg_public_key }}"
# key used for signing backups
global_backup_gpg_private_key:
  name: 05772F3F9FC0EC9A # get the name using `gpg --list-secret-keys --keyid-format LONG`, pick the MASTER KEY (sec)
  key: "{{ secret_backup_gpg_private_key }}"
# to get the ownertrust value, find key fingerprint using gpg PUBLIC_KEY.pub.asc
# then compare with `gpg --export-ownertrust`
global_backup_gpg_ownertrust:
  name: "{{ global_backup_gpg_public_key.name }}.ownertrust.txt"
  value: "20D2F257283B2513213E360005772F3F9FC0EC9A:6:"
# passphrase of the signing and decrypting keys /!\ PLEASE ESCAPE THE PASSPHRASE IF IT CONTAINS ' CHARACTERS
global_backup_gpg_key_passphrase: "{{ secret_backup_gpg_key_passphrase }}"

global_backup_destination: "pexpect+sftp://backup_heaven-pascal@{{ hostvars['heaven-pascal.youtous.dv']['hostname'] }}/home"
# change the cron-job minute
global_backup_jobs:
  - name: duply-backup-global
    job: PATH=/usr/local/bin:$PATH /usr/local/bin/duply global backup_verify_purge --force
    minute: "0"
    hour: "6"
    day: "*"
    month: "*"
    weekday: "*"
# what to keep ?
global_backup_excludes:
  - "+ /home"
  - "+ /var/lib/docker/volumes" # TODO : check if docker is needed
  - "+ /var/lib/docker/swarm" # TODO : check if docker is needed
  - "- **" # only keep home folder and swarm
### End of Backup strategy parameters ###
...
