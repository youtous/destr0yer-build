---
version: "3.7"

configs:
  nginx.conf:
    name: "{{ nextcloud_stack_name }}_nginx.conf-${DEPLOY_TIMESTAMP}"
    file: "./nginx.conf"
  logs.config.php:
    name: "{{ nextcloud_stack_name }}_logs.config.php-${DEPLOY_TIMESTAMP}"
    file: "./logs.config.php"
  url-cli.config.php:
    name: "{{ nextcloud_stack_name }}_url-cli.config.php-${DEPLOY_TIMESTAMP}"
    file: "./url-cli.config.php"
  old-encryption.config.php:
    name: "{{ nextcloud_stack_name }}_old-encryption.config.php-${DEPLOY_TIMESTAMP}"
    file: "./old-encryption.config.php"
  www2.conf:
    name: "{{ nextcloud_stack_name }}_www2.conf-${DEPLOY_TIMESTAMP}"
    file: "./php-fpm.d/www2.conf"

services:
  nextcloud: &nextcloud
    image: "nextcloud:{{ nextcloud_version }}-fpm-alpine"
    volumes:
      - nextcloud-data:/var/www/html
    # allow www-data to write logs and copy eventual additional configs
    command: >
      sh -c '
      chmod o+w /dev/stdout &&
      cp /tmp/config/*.php config/ || true &&
      chown www-data:www-data -R config &&
      php-fpm
      '
    configs:
      - source: logs.config.php
        target: /tmp/config/logs.config.php
      - source: url-cli.config.php
        target: /tmp/config/url-cli.config.php
      - source: old-encryption.config.php
        target: /tmp/config/old-encryption.config.php
      - source: www2.conf
        target: /usr/local/etc/php-fpm.d/www2.conf
    logging:
      options:
        # this tag is used by fail2ban using `journalctl CONTAINER_TAG=nextcloud`
        tag: "nextcloud"
    environment:
      # Database
      - "MYSQL_DATABASE=${MYSQL_DATABASE}"
      - "MYSQL_USER=${MYSQL_USER}"
      - "MYSQL_PASSWORD=${MYSQL_PASSWORD}"
      - "MYSQL_HOST=${MYSQL_HOST}"
      # Nextcloud
      - "NEXTCLOUD_ADMIN_USER=${NEXTCLOUD_ADMIN_USER}"
      - "NEXTCLOUD_ADMIN_PASSWORD=${NEXTCLOUD_ADMIN_PASSWORD}"
      # Mailing
      - "SMTP_HOST=${SMTP_HOST}"
      - "SMTP_SECURE=${SMTP_SECURE}"
      - "SMTP_PORT=${SMTP_PORT}"
      - "SMTP_AUTHTYPE=${SMTP_AUTHTYPE}"
      - "SMTP_NAME=${SMTP_NAME}"
      - "SMTP_PASSWORD=${SMTP_PASSWORD}"
      - "MAIL_FROM_ADDRESS=${MAIL_FROM_ADDRESS}"
      - "MAIL_DOMAIN=${MAIL_DOMAIN}"
      - "NEXTCLOUD_UPDATE=1" # we use a custom command, required for always try to update / install
      - "NEXTCLOUD_TRUSTED_DOMAINS={{ nextcloud_domain }}" # add the domain to trusted domains during installation
      - "OVERWRITEHOST={{ nextcloud_domain }}"
      - "OVERWRITEPROTOCOL=https"
      - "TRUSTED_PROXIES=172.28.0.0/16 10.0.0.0/8" # trust subnetwork proxy (respectively nginx and caddy)
    networks:
      nextcloud-network-fixed:
    deploy:
      placement:
        constraints:
          - node.role == manager
          - node.labels.nextcloud.nextcloud-data == true
      restart_policy:
        condition: on-failure
        delay: 5s
        window: 60s
        max_attempts: 3

  nextcloud-cron-worker:
    <<: *nextcloud
    deploy:
      mode: replicated
      replicas: 0
      restart_policy:
        condition: none
      labels:
        - "swarm.cronjob.enable=true"
        - "swarm.cronjob.schedule=0 */5 * * * *"
        - "swarm.cronjob.skip-running=true" # do not start a job is one already exists
    command: su -l www-data -s /bin/sh -c 'PHP_MEMORY_LIMIT=512M php -f /var/www/html/cron.php'

  nginx:
    image: nginx
    volumes:
      - nextcloud-data:/var/www/html:ro
    networks:
      nextcloud-network-fixed:
      {{ caddy_network }}:
    configs:
      - source: nginx.conf
        target: /etc/nginx/nginx.conf
    deploy:
      placement:
        constraints:
          - node.role == manager
          - node.labels.nextcloud.nextcloud-data == true
      restart_policy:
        condition: on-failure
        delay: 5s
        window: 30s
        max_attempts: 3
      labels:
        caddy: "{{ nextcloud_domain }}"
        # enable access log
        caddy.log: ""

        # hsts headers (see https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security)
        caddy.1_header.Strict-Transport-Security: "\"max-age=63072000; includeSubDomains; preload\""

        # security labels
        caddy.1_header.-Server: ""
        caddy.1_header.-X-Powered-By: ""
        caddy.1_header.X-Robots-Tag: "none"
        caddy.1_header.Permissions-Policy: "\"accelerometer=(), camera=(), interest-cohort=(), geolocation=(), gyroscope=(), magnetometer=(), microphone=(), payment=(), usb=()\"" # see best practices https://github.com/w3c/webappsec-permissions-policy/blob/master/features.md, https://developer.mozilla.org/en-US/docs/Web/HTTP/Feature_Policy
        caddy.1_header.Referrer-Policy: "same-origin"
        caddy.1_header.X-Content-Type-Options: "nosniff"
        caddy.1_header.X-Frame-Options: "DENY"
        caddy.1_header.X-XSS-Protection: "\"1; mode=block\""
        caddy.1_header.Content-Security-Policy: "\"default-src 'self'; script-src 'self'; img-src 'self' data: 'self'; style-src 'self' 'unsafe-inline'; font-src 'self' data:; frame-ancestors 'self'; frame-src 'self'; object-src 'none';\"" # https://csp-evaluator.withgoogle.com/ content security policy

        # redirect well known
        caddy.2_redir: "\"/.well-known/caldav /remote.php/dav/ 301\""
        caddy.3_redir: "\"/.well-known/card)dav /remote.php/dav/ 301\""

        # try to match filter for a reverse proxy to upstream (eventually add load balancing etc)
        caddy.4_reverse_proxy: "{% raw %}{{upstreams 80}}{% endraw %}"
        caddy.4_reverse_proxy.lb_policy: "round_robin"
        caddy.4_reverse_proxy.health_uri: "/"
        caddy.4_reverse_proxy.health_interval: "5s"

        # todo : implement max requests size & max rateLimit & max connection (maybe at caddy lvl directly)

networks:
  nextcloud-network-fixed:
    driver: overlay
    driver_opts:
      encrypted: ""
    ipam:
      config:
        - subnet: 172.28.0.0/16
  {{ caddy_network }}:
    external: true

volumes:
  nextcloud-data:
    driver: local
...
