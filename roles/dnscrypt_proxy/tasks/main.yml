---
- name: Populate service facts
  ansible.builtin.service_facts:

- name: List of enabled services
  ansible.builtin.set_fact:
    enabled_services: "{{ ansible_facts | json_query('services[*].name') }}"

# This role install DNSCrypt-proxy from upstream
- name: Ensure any local other DNS local service is stopped and disabled
  become: true
  ansible.builtin.service:
    name: "{{ item }}"
    state: stopped
    enabled: false
  when: item in enabled_services
  with_items:
    - systemd-resolved
    - bind9

- name: Check if DNSCrypt-proxy is present
  ansible.builtin.stat:
    path: "{{ dnscrypt_binary_path }}"
  register: dnscrypt_proxy_present

- name: Ensure DNSCrypt-proxy configuration directories exist
  become: true
  ansible.builtin.file:
    state: directory
    path: "{{ item }}"
    owner: root
    group: root
    mode: u=rwx,g=rx,o=x
  with_items:
    - "{{ dnscrypt_configuration_path }}"
    - "{{ dnscrypt_configuration_path }}/db"

- name: Configure DNSCrypt-proxy
  become: true
  ansible.builtin.template:
    src: "templates/config/{{ item.src }}"
    dest: "{{ dnscrypt_configuration_path }}/{{ item.dest }}"
    owner: root
    group: root
    mode: u=rw,g=r,o=r
  with_items:
    - src: db/minisign.pub
      dest: db/minisign.pub
    - src: db/public-resolvers.md
      dest: db/public-resolvers.md
    - src: db/public-resolvers.md.minisig
      dest: db/public-resolvers.md.minisig
    - src: db/relays.md
      dest: db/relays.md
    - src: db/relays.md.minisig
      dest: db/relays.md.minisig
    - src: blocked-names.txt.j2
      dest: blocked-names.txt
    - src: cloaking-rules.txt.j2
      dest: cloaking-rules.txt
    - src: forwarding-rules.txt.j2
      dest: forwarding-rules.txt
    - src: blocked-ips.txt.j2
      dest: blocked-ips.txt
    - src: allowed-ips.txt.j2
      dest: allowed-ips.txt
    - src: allowed-names.txt.j2
      dest: allowed-names.txt
    - src: dnscrypt-proxy.toml.j2
      dest: dnscrypt-proxy.toml
  notify: Restart DNSCrypt-proxy

- name: Get current DNSCrypt-proxy version
  ansible.builtin.command: "{{ dnscrypt_binary_path | quote }} -version"
  when: dnscrypt_proxy_present.stat.exists
  changed_when: false
  register: dnscrypt_proxy_current_version

- name: Get remote latest DNSCrypt-proxy version
  ansible.builtin.shell: >
    set -o pipefail &&
    curl -sL "{{ dnscrypt_proxy_repo | quote }}" | grep "tag_name" | head -1 | cut -d \" -f 4
  register: dnscrypt_proxy_remote_version
  when: dnscrypt_proxy_version == "latest"
  args:
    executable: /bin/bash
    warn: false
  changed_when: false

- name: Install DNSCrypt-proxy latest
  ansible.builtin.import_tasks: install.yml
  # install when not present or local version and remote version are different
  when: >
    dnscrypt_proxy_version == "latest" and
    (not dnscrypt_proxy_present.stat.exists or (dnscrypt_proxy_current_version.stdout != dnscrypt_proxy_remote_version.stdout))
  notify: Restart DNSCrypt-proxy

- name: Install DNSCrypt-proxy specific
  ansible.builtin.import_tasks: install.yml
  # install when not present or local version and remote version are different
  when: >
    dnscrypt_proxy_version != "latest" and
    (not dnscrypt_proxy_present.stat.exists or (dnscrypt_proxy_current_version.stdout != dnscrypt_proxy_remote_version))
  notify: Restart DNSCrypt-proxy

- name: Configure NetworkManager for DNSCrypt-proxy
  ansible.builtin.import_tasks: network-manager.yml

- name: Copy DNSCrypt-proxy systemd service configuration
  become: true
  ansible.builtin.template:
    src: "templates/systemd/{{ item.src }}"
    dest: "/lib/systemd/system/{{ item.dest }}"
    owner: root
    group: root
    mode: u=rw,g=r,o=r
  with_items:
    - src: dnscrypt-proxy.j2.service
      dest: dnscrypt-proxy.service
  notify: Restart DNSCrypt-proxy

- name: Install DNSCrypt-proxy firewall rules
  ansible.builtin.import_tasks: firewall.yml

- name: Enable DNSCrypt-proxy
  become: true
  ansible.builtin.systemd:
    name: dnscrypt-proxy
    enabled: true
    state: started
    masked: false
...
