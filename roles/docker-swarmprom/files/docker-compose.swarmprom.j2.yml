version: "3.7"

configs:
  dockerd_config:
    file: ./dockerd-exporter/Caddyfile
  node_rules:
    file: ./prometheus/rules/swarm_node.rules.yml
  task_rules:
    file: ./prometheus/rules/swarm_task.rules.yml

secrets:
  alertmanager:
    file: ./alertmanager/alertmanager.yml

services:

  # API expose over HTTP
  dockerd-exporter:
    image: stefanprodan/caddy
    networks:
      - net
    environment:
      - DOCKER_GWBRIDGE_IP=172.18.0.1
    configs:
      - source: dockerd_config
        target: /etc/caddy/Caddyfile
    deploy:
      mode: global
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
    restart: unless-stopped

  # collects metrics from containers
  cadvisor:
    image: google/cadvisor
    networks:
      - net
    command: -logtostderr -docker_only
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /:/rootfs:ro
      - /var/run:/var/run
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    deploy:
      mode: global
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
    restart: unless-stopped

  # visualization
  grafana:
    image: stefanprodan/swarmprom-grafana:5.3.4
    environment:
      # disable auth, will be handled with traefik
      # see https://github.com/grafana/grafana/issues/2335
      - GF_AUTH_BASIC_ENABLED=false
      - GF_AUTH_PROXY_ENABLED=false
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_USERS_ALLOW_SIGN_UP=false
      # Grafana alert system with emails
      - GF_SMTP_ENABLED=true
      - GF_SMTP_FROM_NAME=Grafana
      - "GF_SMTP_FROM_ADDRESS={{ alert_email_from }}"
      - "GF_SMTP_HOST={{ alert_email_server }}:{{ alert_email_port }}"
      - "GF_SMTP_USER={{ alert_email_user }}"
      - "GF_SMTP_PASSWORD={{ alert_email_password }}"
    volumes:
      - grafana:/var/lib/grafana
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
      labels:
        - "traefik.frontend.rule=Host:{{ grafana_domain }}"
        - traefik.enable=true
        - traefik.port=3000
        - "traefik.tags={{ traefik_public_tag }}"
        - "traefik.docker.network={{ traefik_network }}"
        # Traefik service that listens to HTTP
        - traefik.redirectorservice.frontend.entryPoints=http
        - traefik.redirectorservice.frontend.redirect.entryPoint=https
        # Traefik service that listens to HTTPS
        - traefik.webservice.frontend.entryPoints=https
        # security labels
        - traefik.frontend.headers.browserXSSFilter=true
        - traefik.frontend.headers.frameDeny=true
        - traefik.frontend.headers.contentTypeNosniff=true
        # HSTS
        - traefik.frontend.headers.SSLRedirect=true
        - "traefik.frontend.headers.SSLHost={{ grafana_domain }}"
        - traefik.frontend.headers.STSSeconds=315360000
        - traefik.frontend.headers.STSIncludeSubdomains=true
        - traefik.frontend.headers.STSPreload=true
        # Auth
        - "traefik.frontend.auth.basic.users={{ backend_users|join(',') | replace('$', '$$') }}"
        - "traefik.frontend.whiteList.sourceRange={{ trusted_backend_ips|join(',') }},127.0.0.1"
    networks:
      - default
      - net
      - {{ traefik_network }}
    restart: unless-stopped

  # sends alerts
  alertmanager:
    image: prom/alertmanager
    secrets:
      - source: alertmanager
        target: /etc/alertmanager/alertmanager.yml
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    volumes:
      - alertmanager:/alertmanager
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
      labels:
        - "traefik.frontend.rule=Host:{{ alertmanager_domain }}"
        - traefik.enable=true
        - traefik.port=9093
        - "traefik.tags={{ traefik_public_tag }}"
        - "traefik.docker.network={{ traefik_network }}"
        # Traefik service that listens to HTTP
        - traefik.redirectorservice.frontend.entryPoints=http
        - traefik.redirectorservice.frontend.redirect.entryPoint=https
        # Traefik service that listens to HTTPS
        - traefik.webservice.frontend.entryPoints=https
        # security labels
        - traefik.frontend.headers.browserXSSFilter=true
        - traefik.frontend.headers.frameDeny=true
        - traefik.frontend.headers.contentTypeNosniff=true
        # HSTS
        - traefik.frontend.headers.SSLRedirect=true
        - "traefik.frontend.headers.SSLHost={{ alertmanager_domain }}"
        - traefik.frontend.headers.STSSeconds=315360000
        - traefik.frontend.headers.STSIncludeSubdomains=true
        - traefik.frontend.headers.STSPreload=true
        # Auth
        - "traefik.frontend.auth.basic.users={{ backend_users|join(',') | replace('$', '$$') }}"
        - "traefik.frontend.whiteList.sourceRange={{ trusted_backend_ips|join(',') }},127.0.0.1"
    networks:
      - default
      - net
      - {{ traefik_network }}
    restart: unless-stopped

  # helps to visualize alerts generated
#  unsee:
#    image: cloudflare/unsee:v0.8.0
#    environment:
#      - "ALERTMANAGER_URIS=default:http://alertmanager:9093"
#    deploy:
#      mode: replicated
#      replicas: 1
#      labels:
#        - "traefik.frontend.rule=Host:{{ unsee_domain }}"
#        - traefik.enable=true
#        - traefik.port=8080
#        - "traefik.tags={{ traefik_public_tag }}"
#        - "traefik.docker.network={{ traefik_network }}"
#        # Traefik service that listens to HTTP
#        - traefik.redirectorservice.frontend.entryPoints=http
#        - traefik.redirectorservice.frontend.redirect.entryPoint=https
#        # Traefik service that listens to HTTPS
#        - traefik.webservice.frontend.entryPoints=https
#        # security labels
#        - traefik.frontend.headers.browserXSSFilter=true
#        - traefik.frontend.headers.frameDeny=true
#        - traefik.frontend.headers.contentTypeNosniff=true
#        # HSTS
#        - traefik.frontend.headers.SSLRedirect=true
#        - "traefik.frontend.headers.SSLHost={{ unsee_domain }}"
#        - traefik.frontend.headers.STSSeconds=315360000
#        - traefik.frontend.headers.STSIncludeSubdomains=true
#        - traefik.frontend.headers.STSPreload=true
#        # Auth
#        - "traefik.frontend.auth.basic.users={{ backend_users|join(',') | replace('$', '$$') }}"
#        - "traefik.frontend.whiteList.sourceRange={{ trusted_backend_ips|join(',') }},127.0.0.1"
#    networks:
#      - default
#      - net
#      - {{ traefik_network }}
#    restart: unless-stopped

  # metrics of the host
  node-exporter:
    image: stefanprodan/swarmprom-node-exporter:v0.16.0
    networks:
      - net
    environment:
      - NODE_ID={{ '{{' }}.Node.ID{{ '}}' }}
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /etc/hostname:/etc/nodename
    command:
      - '--path.sysfs=/host/sys'
      - '--path.procfs=/host/proc'
      - '--collector.textfile.directory=/etc/node-exporter/'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
      - '--no-collector.ipvs'
    deploy:
      mode: global
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
    restart: unless-stopped

  # database metrics
  prometheus:
    image: stefanprodan/swarmprom-prometheus:v2.5.0
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention=24h'
    volumes:
      - prometheus:/prometheus
    configs:
      - source: node_rules
        target: /etc/prometheus/swarm_node.rules.yml
      - source: task_rules
        target: /etc/prometheus/swarm_task.rules.yml
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
      labels:
        - "traefik.frontend.rule=Host:{{ prometheus_domain }}"
        - traefik.enable=true
        - traefik.port=9090
        - "traefik.tags={{ traefik_public_tag }}"
        - "traefik.docker.network={{ traefik_network }}"
        # Traefik service that listens to HTTP
        - traefik.redirectorservice.frontend.entryPoints=http
        - traefik.redirectorservice.frontend.redirect.entryPoint=https
        # Traefik service that listens to HTTPS
        - traefik.webservice.frontend.entryPoints=https
        # security labels
        - traefik.frontend.headers.browserXSSFilter=true
        - traefik.frontend.headers.frameDeny=true
        - traefik.frontend.headers.contentTypeNosniff=true
        # HSTS
        - traefik.frontend.headers.SSLRedirect=true
        - "traefik.frontend.headers.SSLHost={{ prometheus_domain }}"
        - traefik.frontend.headers.STSSeconds=315360000
        - traefik.frontend.headers.STSIncludeSubdomains=true
        - traefik.frontend.headers.STSPreload=true
        # Auth
        - "traefik.frontend.auth.basic.users={{ backend_users|join(',') | replace('$', '$$') }}"
        - "traefik.frontend.whiteList.sourceRange={{ trusted_backend_ips|join(',') }},127.0.0.1"
    networks:
      - default
      - net
      - {{ traefik_network }}
    restart: unless-stopped

networks:
  net:
    driver: overlay
    driver_opts:
      encrypted: ""
    attachable: true
  {{ traefik_network }}:
    external: true

volumes:
  prometheus: {}
  grafana: {}
  alertmanager: {}