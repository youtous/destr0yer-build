---
# This role installs Mariadb-server on the system. It allows connections from database_clients hosts (group).

- name: Setup mariadb-server
  become: yes
  import_role:
    name: geerlingguy.mysql
  vars:
    mysql_root_home: /root
    mysql_root_username: root
    mysql_root_password: "{{ mariadb_root_password }}"
    mysql_enabled_on_startup: true
    overwrite_global_mycnf: true
    # A list of files that should override the default global my.cnf. Each item in the array requires a "src"
    # parameter which is a path to a file. An optional "force" parameter can force the file to be updated each time ansible runs.
    mysql_config_include_files:
      - {src: templates/50-ssl.j2.cnf, force: true}
    mysql_databases: "{{ mariadb_databases }}"
    mysql_users: "{{ mariadb_users }}"
    mysql_packages:
      - mariadb-client
      - mariadb-server
      - python-mysqldb
    mysql_port: "3306"
    mysql_bind_address: '0.0.0.0'
    mysql_datadir: "{{ mariadb_datadir }}"
    mysql_log_error: syslog # using journalctl
    mysql_syslog_tag: mariadb
    mysql_config_include_dir: "{{ mariadb_config_include_dir }}"
    mysql_supports_innodb_large_prefix: false # https://github.com/geerlingguy/ansible-role-mysql/issues/272
    # tweaking mariadb resources
    # mysql_key_buffer_size: "256M"
    # mysql_max_allowed_packet: "64M"
    # mysql_table_open_cache: "256"

- name: Configure systemd.service for maridb (logging)
  become: yes
  copy:
    src: files/systemd/mysqld.service.d
    dest: /etc/systemd/system
    owner: root
    group: root
  notify:
    - systemd daemon reload
    - restart mariadb

- name: Configure SSL on mariadb
  import_tasks: ssl.yml
  when: mariadb_ssl_enabled == True

- name: Disable SSL on mariadb
  copy:
    content: "# disabled in Ansible"
    dest: "{{ mariadb_config_include_dir }}/50-ssl.j2.cnf"
  when: mariadb_ssl_enabled == False

- name: Setup host.allow for mariadb
  become: yes
  blockinfile:
    dest: "/etc/hosts.allow"
    block: "{{ lookup('template', 'templates/hosts.allow.j2') }}"
    marker: "### {mark} ANSIBLE MANAGED BLOCK - mariadb allowed ip whitelist ###"

- name: List existing mariadb UFW rules
  become: yes
  shell: >
    ufw status numbered | grep -zoP '\[.*\]\s3306(?!\\d).*\n'  |awk -F"[][]" '{print $2}' | tr --delete [:blank:] | sort -rn | sed '/^s*$/d'
  changed_when: false
  register: ufw_mariadb_rules

- name: UFW delete existing mariadb rules - tcp,udp/3306
  become: yes
  shell: >
    set -o pipefail &&
    yes y | ufw delete {{ item|quote }}
  args:
    executable: /bin/bash
  with_items: "{{ ufw_mariadb_rules.stdout_lines }}"

- name: UFW Allow mariadb clients - tcp,udp/3306
  become: yes
  ufw:
    rule: allow
    port: "3306"
    src: "{{ item }}"
  with_items: "{{ mariadb_allowed_ips }}"

- name: Configure logrotate for mariadb
  import_role:
    name: logrotate
  vars:
    logrotate_applications:
      - name: mariadb
        definitions:
          - logs:
              - "/var/log/mysql/*.log"
            options:
              - monthly
              - rotate 12
              - size 10M
              - compress
              - delaycompress
              - missingok
              - notifempty
              - create 0640 mysql adm
...