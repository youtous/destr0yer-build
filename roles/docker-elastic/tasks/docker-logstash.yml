---
# Setup the required components to send logs from docker nodes to the logstash processor node.
# Transport will be done using TLS certificates (ensure encryption && identity)
# Logstash node will filter any non-authorized ip using UFW and internal mechanism.

- name: List existing logstash tcp/5000 UFW rules
  become: yes
  shell: >
    ufw status numbered | grep -zoP '\[.*\]\s5000(?!\\d).*\n'  |awk -F"[][]" '{print $2}' | tr --delete [:blank:] | sort -rn | sed '/^s*$/d'
  register: ufw_logstash_5000_rules
  changed_when: false

- name: UFW delete existing logstash rules - tcp/5000
  become: yes
  shell: "yes y | ufw delete {{ item|quote }}"
  with_items: "{{ ufw_logstash_5000_rules.stdout_lines }}"

- name: Allow nodes firewall - tcp/5000 (logstash)
  become: yes
  ufw:
    rule: allow
    port: "5000"
    src: "{{ item }}"
  with_items: "{{ logstash_allowed_ips }}"

- name: List existing logstash tcp/5044 UFW rules
  become: yes
  shell: >
    ufw status numbered | grep -zoP '\[.*\]\s5044(?!\\d).*\n'  |awk -F"[][]" '{print $2}' | tr --delete [:blank:] | sort -rn | sed '/^s*$/d'
  register: ufw_logstash_5044_rules
  changed_when: false

- name: UFW delete existing logstash rules - tcp/5044
  become: yes
  shell: "yes y | ufw delete {{ item|quote }}"
  with_items: "{{ ufw_logstash_5044_rules.stdout_lines }}"

- name: Allow nodes firewall - tcp/5044 (logstash)
  become: yes
  ufw:
    rule: allow
    port: "5044"
    src: "{{ item }}"
  with_items: "{{ logstash_allowed_ips }}"

- name: Allow from docker0 containers networks to this host - tcp/5000,5044,5045 (logstash)
  become: yes
  ufw:
    rule: allow
    src: "172.17.0.0/16"
    port: "{{ item }}"
  with_items:
    - "5000"
    - "5044"

- name: Allow from docker_gwbridge containers networks to this host - tcp/5000,5044,5045 (logstash)
  become: yes
  ufw:
    rule: allow
    src: "172.18.0.0/16"
    port: "{{ item }}"
  with_items:
    - "5000"
    - "5044"

- name: Ensure logstash root CA is defined
  fail:
    msg: root CA is empty or not defined.
  when: logstash_CA_certificate is not defined or logstash_CA_certificate|length == 0

- name: Ensure logstash node crt is defined
  fail:
    msg: crt is empty or not defined.
  when: logstash_node_certificate is not defined or logstash_node_certificate|length == 0

- name: Ensure logstash node key is defined
  fail:
    msg: key is empty or not defined.
  when: logstash_node_private_key is not defined or logstash_node_private_key|length == 0

# Setup TLS using x509 certificates
- name: Register logstash secrets
  docker_secret:
    name: "{{ item.name }}"
    data: "{{ item.data }}"
    state: present
  with_items:
    - {name: "{{ docker_elastic_stack_name }}_logstash-rootCA.crt-{{ elastic_deploy_timestamp }}", data: "{{ logstash_CA_certificate }}"}
    - {name: "{{ docker_elastic_stack_name }}_logstash-certificate.crt-{{ elastic_deploy_timestamp }}", data: "{{ logstash_node_certificate }}"}
    - {name: "{{ docker_elastic_stack_name }}_logstash-private-key.key-{{ elastic_deploy_timestamp }}", data: "{{ logstash_node_private_key }}"}
  no_log: true
...