---
# ipv6 firewall rules

- name: Ensure docker external interfaces defined
  fail:
    msg: docker_external_interfaces is empty or not defined.
  when: docker_external_interfaces is not defined or docker_external_interfaces|length == 0

## beginning of rules 5000

- name: List existing logstash tcp/5000 ip6tables  rules
  become: yes
  shell: >
    ip6tables -L DOCKER-USER  -n  --line-numbers | grep -zoP '.* 5000 .*\n' | awk  '{print $1}' | tr -d '\000' | sort -rn | sed '/^s*$/d'
  register: ufw6_logstash_5000_rules
  changed_when: false

- name: ip6tables  delete existing logstash rules - tcp/5000
  become: yes
  command: "ip6tables -D DOCKER-USER {{ item|quote }}"
  with_items: "{{ ufw6_logstash_5000_rules.stdout_lines }}"

- name: Drop other ips firewall - tcp/5000 (logstash)
  become: yes
  command: "ip6tables -I DOCKER-USER -i {{ item|quote }} -p tcp -m conntrack --ctorigdstport 5000 --ctdir ORIGINAL -j DROP"
  with_items: "{{ docker_external_interfaces }}"

- name: Allow nodes firewall - tcp/5000 (logstash)
  become: yes
  command: "ip6tables -I DOCKER-USER -i {{ item|quote }} -s {{ logstash_allowed_ip6s|join(',') }} -p tcp -m conntrack --ctorigdstport 5000 --ctdir ORIGINAL -j ACCEPT"
  with_items: "{{ docker_external_interfaces }}"

  ## end of rules 5000

## beginning of rules 5044

- name: List existing logstash tcp/5044 ip6tables rules
  become: yes
  shell: >
    ip6tables -L DOCKER-USER  -n  --line-numbers | grep -zoP '.* 5044 .*\n' | awk  '{print $1}' | tr -d '\000' | sort -rn | sed '/^s*$/d'
  register: ufw6_logstash_5044_rules
  changed_when: false

- name: ip6tables  delete existing logstash rules - tcp/5044
  become: yes
  command: "ip6tables -D DOCKER-USER {{ item|quote }}"
  with_items: "{{ ufw6_logstash_5044_rules.stdout_lines }}"

- name: Drop other ips firewall - tcp/5044 (logstash)
  become: yes
  command: "ip6tables -I DOCKER-USER -i {{ item|quote }} -p tcp -m conntrack --ctorigdstport 5044 --ctdir ORIGINAL -j DROP"
  with_items: "{{ docker_external_interfaces }}"

- name: Allow nodes firewall - tcp/5044 (logstash)
  become: yes
  command: "ip6tables -I DOCKER-USER -i {{ item|quote }} -s {{ logstash_allowed_ip6s|join(',') }} -p tcp -m conntrack --ctorigdstport 5044 --ctdir ORIGINAL -j ACCEPT"
  with_items: "{{ docker_external_interfaces }}"

## end of rules 5044

## beginning of rules 5064 (external)

- name: List existing logstash tcp/5064 ip6tables rules
  become: yes
  shell: >
    ip6tables -L DOCKER-USER  -n  --line-numbers | grep -zoP '.* 5064 .*\n' | awk  '{print $1}' | tr -d '\000' | sort -rn | sed '/^s*$/d'
  register: ufw6_logstash_5064_rules
  changed_when: false

- name: ip6tables delete existing logstash rules - tcp/5064
  become: yes
  command: "ip6tables -D DOCKER-USER {{ item|quote }}"
  with_items: "{{ ufw6_logstash_5064_rules.stdout_lines }}"

- name: Drop other ips firewall - tcp/5064 (logstash external)
  become: yes
  command: "ip6tables -I DOCKER-USER -i {{ item|quote }} -p tcp -m conntrack --ctorigdstport 5064 --ctdir ORIGINAL -j DROP"
  with_items: "{{ docker_external_interfaces }}"

- name: Allow nodes firewall - tcp/5064 (logstash external)
  become: yes
  command: "ip6tables -I DOCKER-USER -i {{ item|quote }} -s {{ logstash_beats_external_allowed_ip6s|join(',') }} -p tcp -m conntrack --ctorigdstport 5064 --ctdir ORIGINAL -j ACCEPT"
  with_items: "{{ docker_external_interfaces }}"

## end of rules 5064

## save rules across reboots
- name: Export DOCKER-USER ip6tables chain
  become: yes
  shell: ip6tables -S DOCKER-USER
  register: ip6tables_docker_user_rules
  changed_when: false

- name: Save DOCKER-USER ip6tables rules
  become: yes
  blockinfile:
    create: yes
    dest: "/etc/iptables.docker-user.rules.v6"
    block: "{{ ip6tables_docker_user_rules.stdout }}"
    marker: "### {mark} ANSIBLE MANAGED BLOCK - IPv6 DOCKER-USER before rules ###"
  when: ip6tables_docker_user_rules is not failed

- name: Ensure iptables docker-user rules are persistent
  become: yes
  copy:
    src: "files/ip6tables-docker-user-restore"
    dest: "/etc/network/if-pre-up.d/ip6tables-docker-user-restore"
    owner: root
    group: root
    mode: u=rwx,g=xr,o=x
  when: ip6tables_docker_user_rules is not failed
...