filter {
    if [@metadata][beat] == "journalbeat" and ("internal_input" in [tags]) {
       if ([container][log][tag] == "traefik-consul") {
          grok {
             match => {
                  "message" =>  "%{IPORHOST:traefik.access.remote_ip} - %{DATA:traefik.access.user_name} \[%{HTTPDATE:traefik.access.time}\] \"%{WORD:traefik.access.method} %{DATA:traefik.access.url} HTTP/%{NUMBER:traefik.access.http_version}\" %{NUMBER:traefik.access.response_code} (?:%{NUMBER:traefik.access.body_sent.bytes}|-)( \"%{DATA:traefik.access.referrer}\")?( \"%{DATA:traefik.access.agent}\")?(?: %{NUMBER:traefik.access.request_count}|-)?( \"%{DATA:traefik.access.frontend_name}\")?( \"%{DATA:traefik.access.backend_url}\")?( %{NUMBER:traefik.access.response_duration:long}ms)?"
             }
          }
          if "_grokparsefailure" in [tags] {
              # not a request message for traefik, continue...
              mutate {
                  remove_tag => ["_grokparsefailure"]
              }
          } else {
              # processing traefik message
              mutate {
                  remove_field => ["message"]
              }
              mutate {
                  rename => {"@timestamp" => "event.created"}
              }
              date {
                  match => ["traefik.access.time", "dd/MMM/yyyy:H:m:s Z"]
                  target => ["@timestamp"]
              }
              mutate {
                  remove_field => ["traefik.access.time"]
              }
              mutate {
                  convert => {
                      "traefik.acess.response_code" => "integer"
                      "traefik.access.response_duration" => "integer"
                  }
              }
              useragent {
                  source => "traefik.access.agent"
                  target => "user_agent"
              }
              geoip {
                  source => "traefik.access.remote_ip"
                  target => "source.geo"
              }
          }
       }
    }
}