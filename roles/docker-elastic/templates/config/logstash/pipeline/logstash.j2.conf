input {
  tcp {
    port => 5000
    type => syslog
    ssl_enable => true
    ssl_certificate_authorities => ["/etc/ca.crt"]
    ssl_cert => "/etc/server.crt"
    ssl_key => "/etc/server.key"
    ssl_verify => true
  }
  beats {
    port => 5044
    tags => ["input_beats"]
    ssl => true
    ssl_certificate_authorities => ["/etc/ca.crt"]
    ssl_certificate => "/etc/server.crt"
    ssl_key => "/etc/server.key"
    ssl_verify_mode => force_peer
    tls_min_version => "1.2"
  }
  tcp {
    port => 5064
    tags => ["input_external_logstash"]
    codec => json
    ssl_enable => true
    ssl_certificate_authorities => ["/etc/ca.crt"]
    ssl_cert => "/etc/server.crt"
    ssl_key => "/etc/server.key"
    ssl_verify => true
  }
  http {
    host => "0.0.0.0"
    port => "8080"
    type => "http-input"
  }
  # http listener used for healthchecking only
  http {
    host => "0.0.0.0"
    port => "8082"
    type => "elb-healthcheck"
  }
}

filter {
  if ("input_external_logstash" in [tags]) {
    # external source, nothing to do
  } else if [type] == "elb-healthcheck" {
    drop {}
  } else if [@metadata][beat] == "journalbeat" {
      if [message] =~ "^ *{" {
            json {
              source => "message"
            }
            if "_jsonparsefailure" in [tags] {
              drop {}
            }
            mutate {
              remove_field => ["message"]
            }
      } else if ([container][name] =~ "^traefik*") {
          grok {
             match => {
                  "message" =>  "%{IPORHOST:traefik.access.remote_ip} - %{DATA:traefik.access.user_name} \[%{HTTPDATE:traefik.access.time}\] \"%{WORD:traefik.access.method} %{DATA:traefik.access.url} HTTP/%{NUMBER:traefik.access.http_version}\" %{NUMBER:traefik.access.response_code} (?:%{NUMBER:traefik.access.body_sent.bytes}|-)( \"%{DATA:traefik.access.referrer}\")?( \"%{DATA:traefik.access.agent}\")?(?: %{NUMBER:traefik.access.request_count}|-)?( \"%{DATA:traefik.access.frontend_name}\")?( \"%{DATA:traefik.access.backend_url}\")?( %{NUMBER:temp.duration:long}ms)?"
             }
          }
          if "_grokparsefailure" in [tags] {
              # not a request message for traefik, continue...
              mutate {
                  remove_tag => ["_grokparsefailure"]
              }
          } else {
              # processing traefik message
              mutate {
                  remove_field => ["message"]
              }
              mutate {
                  rename => {"@timestamp" => "event.created"}
              }
              date {
                  match => ["traefik.access.time", "dd/MMM/yyyy:H:m:s Z"]
                  target => ["@timestamp"]
              }
              mutate {
                  remove_field => ["traefik.access.time"]
              }
              mutate {
                  convert => {
                      "traefik.acess.response_code" => "integer"
                  }
              }
              useragent {
                  source => "traefik.access.agent"
                  target => "user_agent"
              }
              geoip {
                  source => "traefik.access.remote_ip"
                  target => "source.geo"
              }
          }
      }

      if ([container]) {
         # in case of a container, syslog identifier does not make sense
         mutate {
            remove_field => ["[systemd][unit]", "[syslog][unit]", "[syslog][identifier]"]
         }
      }

      mutate {
        remove_field => ["[host][boot_id]", "[host][id]", "[process]", "[container][id]", "[systemd][transport]", "facility", "[syslog][facility]", "[syslog][pid]", "[systemd][cgroup]", "[systemd][invocation_id]", "[systemd][slice]", "[agent]"]
      }

  } else if [type] == "syslog" {
        grok {
          match => {"message" => "%{SYSLOG5424PRI}%{NONNEGINT:ver} +(?:%{TIMESTAMP_ISO8601:ts}|-) +(?:%{HOSTNAME:containerhost}|-) +(?:%{NOTSPACE:containername}|-) +(?:%{NOTSPACE:proc}|-) +(?:%{WORD:msgid}|-) +(?:%{SYSLOG5424SD:sd}|-|) +%{GREEDYDATA:msg}"}
        }
        syslog_pri {}
        date {
          match => ["syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss"]
        }
        mutate {
          remove_field => ["message", "priority", "ts", "severity", "facility", "facility_label", "severity_label", "syslog5424_pri", "proc", "syslog_severity_code", "syslog_facility_code", "syslog_facility", "syslog_severity", "syslog_hostname", "syslog_message", "syslog_timestamp", "ver"]
        }
        mutate {
          remove_tag => ["_grokparsefailure_sysloginput"]
        }
        if [msg] =~ "^ *{" {
          json {
            source => "msg"
          }
          if "_jsonparsefailure" in [tags] {
            drop {}
          }
          mutate {
            remove_field => ["msg"]
          }
        }
        if [containername] =~ "^traefik*" {
        grok {
            match => {
                "msg" =>  "%{IPORHOST:traefik.access.remote_ip} - %{DATA:traefik.access.user_name} \[%{HTTPDATE:traefik.access.time}\] \"%{WORD:traefik.access.method} %{DATA:traefik.access.url} HTTP/%{NUMBER:traefik.access.http_version}\" %{NUMBER:traefik.access.response_code} (?:%{NUMBER:traefik.access.body_sent.bytes}|-)( \"%{DATA:traefik.access.referrer}\")?( \"%{DATA:traefik.access.agent}\")?(?: %{NUMBER:traefik.access.request_count}|-)?( \"%{DATA:traefik.access.frontend_name}\")?( \"%{DATA:traefik.access.backend_url}\")?( %{NUMBER:temp.duration:long}ms)?"
            }
        }
        if "_grokparsefailure" in [tags] {
            # not a request message for traefik, continue...
            mutate {
                remove_tag => ["_grokparsefailure"]
            }
        } else {
            # processing traefik message
            mutate {
                remove_field => ["msg"]
            }
            mutate {
                rename => {"@timestamp" => "event.created"}
            }
            date {
                match => ["traefik.access.time", "dd/MMM/yyyy:H:m:s Z"]
                target => ["@timestamp"]
            }
            mutate {
                remove_field => ["traefik.access.time"]
            }
            mutate {
                convert => {
                    "traefik.acess.response_code" => "integer"
                }
            }
            useragent {
                source => "traefik.access.agent"
                target => "user_agent"
            }
            geoip {
                source => "traefik.access.remote_ip"
                target => "source.geo"
            }
        }
    }

    if ("" in [msg]) {
        mutate {
            rename => {"msg" => "message"}
        }
    }
  }

  if ("input_beats" in [tags]) {
    mutate {
        remove_field => ["[agent]", "[host][hostname]"]
    }
  }

  if ("input_external_logstash" not in [tags]) {
    mutate {
      add_field => {
          "[@metadata][cluster][name]" => "${ELASTIC_CLUSTER_NAME}"
      }
    }
  }

  # always remove tags
  mutate {
    remove_field => ["[tags]"]
  }

}

output {
{% if elastic_use_as_forwarder %}
    tcp {
        codec => json
        host => {{ elastic_logstash_destination }}
        port => 5064
        ssl_enable => true
        ssl_cacert => "/etc/ca-client.crt" # this certificate is the CLIENT certificate, logstash is ascting as a client forwarder
        ssl_cert => "/etc/client.crt"
        ssl_key => "/etc/client.key"
        ssl_verify => true
    }
{% else %}
    # from https://stackoverflow.com/questions/41188521/elasticsearch-multiple-indices-per-beats
    if ([container] and [@metadata][beat] != "metricbeat") {
      elasticsearch {
        hosts => ["elasticsearch:9200"]
        manage_template => false
        index => "docker-%{[@metadata][cluster][name]}-%{+YYYY.MM.dd}"
      }
     } else if [@metadata][beat] {
      elasticsearch {
        hosts => ["elasticsearch:9200"]
        manage_template => false
        index => "%{[@metadata][beat]}-%{[@metadata][cluster][name]}-%{[@metadata][version]}-%{+YYYY.MM.dd}"
      }
     } else {
      elasticsearch {
        hosts => ["elasticsearch:9200"]
        index => "%{type}-%{[@metadata][cluster][name]}-%{+YYYY.MM.dd}"
      }
    }
{% endif %}
}
