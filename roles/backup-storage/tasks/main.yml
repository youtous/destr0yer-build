---
# This role setup a backup server using sftp and chroot
# ssh role must be used in order to have a properly configured server
- name: Install openssh-server package
  become: True
  apt:
    name:
      - openssh-server

- name: Create root backup directory
  become: True
  file:
    path: "{{ backup_root_directory }}"
    state: directory
    owner: root
    group: root
    # everybody should be allowed to list the directory, it will be the root
    # of the sftp server
    mode: u=rwx,g=rx,o=x

- name: Configure sshd to use internal-sftp server
  become: True
  lineinfile:
    dest: "/etc/ssh/sshd_config"
    regexp: "^Subsystem"
    line: "Subsystem sftp internal-sftp"
    validate: "/usr/sbin/sshd -T -f %s -C user=doesnotexist,host=none,addr=none"
  notify:
    - restart sshd

- name: Add sftp-backup group to allowed groups
  become: True
  blockinfile:
    dest: "/etc/ssh/sshd_config"
    block: "AllowGroups {{ backup_group_name }}"
    insertafter: "^AllowGroups .*$"
    marker: "### {mark} ANSIBLE MANAGED BLOCK - sftp allow groups ssh ###"
    validate: "/usr/sbin/sshd -T -f %s -C user=doesnotexist,host=none,addr=none"
  notify:
    - restart sshd

- name: Configure sftp access with restricted ip
  become: True
  blockinfile:
    dest: "/etc/ssh/sshd_config"
    block: "{{ lookup('template', 'files/sshd_restrict_ip_config.j2') }}"
    marker: "### {mark} ANSIBLE MANAGED BLOCK - sftp restrict ips access ###"
    insertbefore: "^Subsystem"
    validate: "/usr/sbin/sshd -T -f %s -C user=doesnotexist,host=none,addr=none"
  notify:
    - restart sshd

- name: Configure firewall for allow sftp access
  import_tasks: firewall.yml

- name: Configure sftp group policy
  become: True
  blockinfile:
    dest: "/etc/ssh/sshd_config"
    block: "{{ lookup('template', 'files/sshd_sftp_config.j2') }}"
    # Match MUST BE SET at the end of the file... (https://unix.stackexchange.com/questions/67334/openssh-how-to-end-a-match-block)
    validate: "/usr/sbin/sshd -T -f %s -C user=doesnotexist,host=none,addr=none"
    marker: "### {mark} ANSIBLE MANAGED BLOCK - sftp group policy ###"
  notify:
    - restart sshd

- name: Create backup group
  become: True
  import_role:
    name: youtous.users
  vars:
    groups_to_create:
      - name: "{{ backup_group_name }}"
        gid: "{{ backup_group_gid }}"

- name: Unlock .ssh folder of backup users
  become: True
  file:
    path: "{{ backup_root_directory }}/backup_{{ item.username }}/.ssh"
    attributes: -i
  with_items: "{{ backup_users }}"
  ignore_errors: yes # if the directory is not yet created, ignore

- name: Unlock .ssh/authorized_keys of backup users
  become: True
  file:
    path: "{{ backup_root_directory }}/backup_{{ item.username }}/.ssh/authorized_keys"
    attributes: -i
  with_items: "{{ backup_users }}"
  ignore_errors: yes

- name: Create backup accounts
  include_role:
    name: youtous.users
  vars:
    # pass sudo vars which are passed when using include_role (https://github.com/ansible/ansible/issues/29159#issuecomment-380800491)
    ansible_become: True

    users_create_per_user_group: false # don't create group for these accounts
    users_create_homedirs: true # home folder must be present, it's the root of the sftp server
    users_default_shell: /bin/false # don't create home folder for these accounts
    users_group: "{{ backup_group_name }}"
    users:
      - username: "backup_{{ account.username }}"
        name: "backup_{{ account.username }}"
        home: "{{ backup_root_directory }}/backup_{{ account.username }}"
        ssh_key: "{{ account.ssh_keys|default([]) }}"
  with_items: "{{ backup_users }}"
  loop_control:
    loop_var: account

- name: Lock .ssh folder of backup users
  become: True
  file:
    path: "{{ backup_root_directory }}/backup_{{ item.username }}/.ssh"
    attributes: i
  with_items: "{{ backup_users }}"

- name: Lock .ssh/authorized_keys of backup users
  become: True
  file:
    path: "{{ backup_root_directory }}/backup_{{ item.username }}/.ssh/authorized_keys"
    attributes: i
  with_items: "{{ backup_users }}"

- name: Fix sudoers admin group sudo with password
  become: True
  lineinfile:
    path: /etc/sudoers
    state: present
    regexp: '^%admin ALL='
    line: '%admin ALL=(ALL) PASSWD: ALL'
    validate: '/usr/sbin/visudo -cf %s'
  tags: ["users", "groups", "configuration"]

- name: Ensure backup folders permissions
  become: True
  file:
    state: directory
    path: "{{ backup_root_directory }}/backup_{{ item.username }}"
    owner: root
    group: root
    mode: u=rwx,g=rx,o=rx
  with_items: "{{ backup_users }}"

- name: Ensure backup folders permissions
  become: True
  file:
    state: directory
    path: "{{ backup_root_directory }}/backup_{{ item.username }}/home"
    owner: "backup_{{ item.username }}"
    group: "{{ backup_group_name }}"
    mode: u=rwx,g=,o=
  with_items: "{{ backup_users }}"

- name: Configure frozen backups export
  import_tasks: frozen.yml
  when: backup_frozen_directory is defined

- name: Disable frozen backups export
  import_tasks: remove-frozen.yml
  when: backup_frozen_directory is undefined
