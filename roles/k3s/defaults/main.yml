---
# Imported from https://github.com/PyratLabs/ansible-role-k3s/tree/main/defaults
##
# Global/Cluster Configuration
##

# k3s state, options: installed, started, stopped, restarted, uninstalled, validated
# (default: installed)
k3s_installation_state: installed

# Use a specific k3s version, if set to "false" we will get the latest
# k3s_installation_release_version: v1.19.3
k3s_installation_release_version: "v1.27.3+k3s1"

# Location of the k3s configuration file
k3s_installation_config_file: "/etc/rancher/k3s/config.yaml"

# Location of the k3s configuration directory
k3s_installation_config_yaml_d_dir: "/etc/rancher/k3s/config.yaml.d"

# When multiple ansible_play_hosts are present, attempt to cluster the nodes.
# Using false will create multiple standalone nodes.
# (default: true)
k3s_installation_build_cluster: true

# URL for GitHub project
k3s_installation_github_url: https://github.com/k3s-io/k3s

# URL for K3s updates API
k3s_installation_api_url: https://update.k3s.io

# Install K3s in Air Gapped scenarios
k3s_installation_airgap: false

# Skip all tasks that validate configuration
k3s_installation_skip_validation: false

# Skip all tasks that check environment configuration
k3s_installation_skip_env_checks: false

# Skip post-checks
k3s_installation_skip_post_checks: false

# Installation directory for k3s
k3s_installation_install_dir: /usr/local/bin

# Install using hard links rather than symbolic links
k3s_installation_install_hard_links: false

# A list of templates used for configuring the server.
k3s_installation_server_config_yaml_d_files: []

# A list of templates used for configuring the agent.
k3s_installation_agent_config_yaml_d_files: []

# A list of templates used for pre-configuring the cluster.
k3s_installation_server_manifests_templates: []

# A list of URLs used for pre-configuring the cluster.
k3s_installation_server_manifests_urls: []
#  - url: https://some/url/to/manifest.yml
#    filename: manifest.yml

# A list of templates used for installing static pod manifests on the control plane.
k3s_installation_server_pod_manifests_templates: []

# A list of URLs used for installing static pod manifests on the control plane.
k3s_installation_server_pod_manifests_urls: []
#  - url: https://some/url/to/manifest.yml
#    filename: manifest.yml

# Use experimental features in k3s?
k3s_installation_use_experimental: true

# Allow for unsupported configurations in k3s?
k3s_installation_use_unsupported_config: false

# Enable etcd embedded datastore
k3s_installation_etcd_datastore: false

##
# Systemd config
##

# Start k3s on system boot
k3s_installation_start_on_boot: true

# List of required systemd units to k3s service unit.
k3s_installation_service_requires: []

# List of "wanted" systemd unit to k3s (weaker than "requires").
k3s_installation_service_wants: []

# Start k3s before a defined list of systemd units.
k3s_installation_service_before: []

# Start k3s after a defined list of systemd units.
k3s_installation_service_after: []

# Dictionary of environment variables to use within systemd unit file
# Some examples below
k3s_installation_service_env_vars: {}
#  PATH: /opt/k3s/bin
#  GOGC: 10

# Location on host of a environment file to include. This must already exist on
# the target as this role will not populate this file.
k3s_installation_service_env_file: false


##
# Server Configuration
##
# TODO : reintegrate base k3s parameters from inventories
k3s_installation_server:
  disable:
    - traefik
  kubelet-arg:
    - "resolv-conf=/etc/k3s-resolv.conf"

# k3s_installation_server:
#  listen-port: 6443

##
# Agent Configuration
##

k3s_installation_agent:
  kubelet-arg:
    - "resolv-conf=/etc/k3s-resolv.conf"
# k3s_installation_agent:
#   node-label:
#     - "foo=bar"
#     - "bish=bosh"

##
# Ansible Controller configuration
##

# Use become privileges?
k3s_installation_become: true

# Private registry configuration.
# Rancher k3s documentation: https://rancher.com/docs/k3s/latest/en/installation/private-registry/
k3s_installation_registries:

  mirrors:
#    docker.io:
#      endpoint:
#        - "https://mycustomreg.com:5000"
  configs:
#    "mycustomreg:5000":
#      auth:
#        # this is the registry username
#        username: xxxxxx
#        # this is the registry password
#        password: xxxxxx
#      tls:
#        # path to the cert file used in the registry
#        cert_file:
#        # path to the key file used in the registry
#        key_file:
#        # path to the ca file used in the registry
#        ca_file:

# address of the k3s control plane (should be a loadbalancer or a vip)
# until multiple addresses are supported (see https://github.com/k3s-io/k3s/issues/7325)
# k3s_installation_registration_address: 

# port ranges
k3s_ufw_embedded_etcd_port_range: "2379:2380"
k3s_ufw_kube_api_port: "6443"
k3s_ufw_kubelet_metrics_port: "10250"

k3s_workers_ips: "{{ 
  groups['k3s_worker_node'] | map('extract', hostvars, ['ipv4_private']) | list | flatten | unique | default([]) +
  groups['k3s_worker_node'] | map('extract', hostvars, ['ipv6_private']) | list | flatten | unique | default([]) 
  }}
  "

k3s_controllers_ips: "{{ 
  groups['k3s_control_node'] | map('extract', hostvars, ['ipv4_private']) | list | flatten | unique | default([]) +
  groups['k3s_control_node'] | map('extract', hostvars, ['ipv6_private']) | list | flatten | unique | default([]) 
  }}
  "

k3s_all_nodes_ips: "{{ k3s_workers_ips + k3s_controllers_ips | flatten | unique }}" 

# by default, use the hostname server as dns source
k3s_dns_servers: "{{ (ipv4_private | default([]) + ipv6_private | default([])) | list | flatten }}"
...
