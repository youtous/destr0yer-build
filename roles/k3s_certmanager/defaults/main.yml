---
# Certmanager variables

certmanager_chart_version: "v1.12.3"
certmanager_chart_download_url: "https://charts.jetstack.io/charts/cert-manager-{{ certmanager_chart_version }}.tgz"
certmanager_chart_sha265sum: "2ecb7518e9adc7028841ec05eb37dff417cd4e70b80b8f24f1ee4e76e985f80f"

certmanager_helm_release_name: certmanager

certmanager_k8s_namespace: cert-manager

certmanager_k8s_helm_values:
  installCRDs: true
  namespace: "{{ certmanager_k8s_namespace }}"

# Cluster Cert issuer (use let's encrypt in a connected environment)
certmanager_k8s_cluster_cert_issuer:
  apiVersion: cert-manager.io/v1
  kind: ClusterIssuer
  metadata:
    name: letsencrypt
  spec:
    # In development mode we don't use let's encrypt due to local connectivity limitation
    # on a staging/production, please use the acme provider of your choice: ZeroSSL, LetsEncrypt
    #
    # acme:
    #   email: myemail@company.com
    #   server: https://acme-staging-v02.api.letsencrypt.org/directory
    #   privateKeySecretRef:
    #     # Secret used to store the account's private key.
    #     name: le-cluster-issuer-account-key
    #   # Add a ACME HTTP01 challenge solver
    #   solvers:
    #     - http01:
    #         ingress:
    #           ingressClassName: haproxy

    selfSigned: {}

certmanager_helm_show_commands: true

# kube config
certmanager_kubeconfig_path: "{{ ansible_env.HOME }}/.kube/config"
...
