version: "3.7"

configs:
  whitelist_clients.local:
    name: "{{ docker_mailserver_stack_name }}_whitelist_clients-${DEPLOY_TIMESTAMP}"
    file: "./config/whitelist_clients.local"
  postfix-regexp.cf:
    name: "{{ docker_mailserver_stack_name }}_postfix-regexp-${DEPLOY_TIMESTAMP}"
    file: "./config/postfix-regexp.cf"
  postfix-virtual.cf:
    name: "{{ docker_mailserver_stack_name }}_postfix-virtual-${DEPLOY_TIMESTAMP}"
    file: "./config/postfix-virtual.cf"
  postfix-relaymap.cf:
    name: "{{ docker_mailserver_stack_name }}_postfix-relaymap-${DEPLOY_TIMESTAMP}"
    file: "./config/postfix-relaymap.cf"
  postfix-send-access.cf:
    name: "{{ docker_mailserver_stack_name }}_postfix-send-access-${DEPLOY_TIMESTAMP}"
    file: "./config/postfix-send-access.cf"
  postfix-receive-access.cf:
    name: "{{ docker_mailserver_stack_name }}_postfix-receive-access-${DEPLOY_TIMESTAMP}"
    file: "./config/postfix-receive-access.cf"
  opendkim-KeyTable:
    name: "{{ docker_mailserver_stack_name }}_opendkim-KeyTable-${DEPLOY_TIMESTAMP}"
    file: "./config/opendkim/KeyTable"
  opendkim-SigningTable:
    name: "{{ docker_mailserver_stack_name }}_opendkim-SigningTable-${DEPLOY_TIMESTAMP}"
    file: "./config/opendkim/SigningTable"

secrets:
  postfix-accounts.cf:
    name: "{{ docker_mailserver_stack_name }}_postfix-accounts-${DEPLOY_TIMESTAMP}"
    external: true
  postfix-sasl-password.cf:
    name: "{{ docker_mailserver_stack_name }}_postfix-sasl-password-${DEPLOY_TIMESTAMP}"
    external: true
# generate secrets associated to each domain
{% for mailserver in mailserver_domains %}
  dkim_private_{{ mailserver.domain }}:
    name: "{{ docker_mailserver_stack_name }}_dkim_private_{{ mailserver.domain }}-${DEPLOY_TIMESTAMP}"
    external: true
  dkim_public_{{ mailserver.domain }}:
    name: "{{ docker_mailserver_stack_name }}_dkim_public_{{ mailserver.domain }}-${DEPLOY_TIMESTAMP}"
    external: true
{% endfor %}

services:

  mailserver:
    image: tvial/docker-mailserver:latest
    ports:
      - target: 25
        published: 25
        mode: host
      - target: 143
        published: 143
        mode: host
      - target: 587
        published: 587
        mode: host
      - target: 993
        published: 993
        mode: host
    volumes:
      - mailserver-data:/var/mail
      - mailserver-state:/var/mail-state
    configs:
      - source: opendkim-KeyTable
        target: "/tmp/docker-mailserver/opendkim/opendkim-KeyTable"
      - source: opendkim-SigningTable
        target: "/tmp/docker-mailserver/opendkim/opendkim-SigningTable"
      - source: whitelist_clients.local
        target: "/tmp/docker-mailserver/whitelist_clients.local"
      - source: postfix-regexp.cf
        target: "/tmp/docker-mailserver/postfix-regexp.cf"
      - source: postfix-virtual.cf
        target: "/tmp/docker-mailserver/postfix-virtual.cf"
      - source: postfix-relaymap.cf
        target: "/tmp/docker-mailserver/postfix-relaymap.cf"
      - source: postfix-send-access.cf
        target: "/tmp/docker-mailserver/postfix-send-access.cf"
      - source: postfix-receive-access.cf
        target: "/tmp/docker-mailserver/postfix-receive-access.cf"
    secrets:
      - source: postfix-accounts.cf
        target: "/tmp/docker-mailserver/postfix-accounts.cf"
      - source: postfix-sasl-password.cf
        target: "/tmp/docker-mailserver/postfix-sasl-password.cf"
{% for mailserver in mailserver_domains %}
      - source: dkim_private_{{ mailserver.domain }}
        target: "/tmp/docker-mailserver/opendkim/keys/{{ mailserver.domain }}/mail.private"
      - source: dkim_public_{{ mailserver.domain }}
        target: "/tmp/docker-mailserver/opendkim/keys/{{ mailserver.domain }}/mail.txt"
{% endfor %}
    environment:
      # General conf
      - ENABLE_POP3=0 # Pop3 is disabled
      - ONE_DIR=1
      - "OVERRIDE_HOSTNAME={{ mailserver_fqdn }}" # docker swarm does not allow to override hostname using docker-compose.yml
      - "DMS_DEBUG=$DMS_DEBUG"
      - "PERMIT_DOCKER=$PERMIT_DOCKER" # see # https://github.com/tomav/docker-mailserver/issues/1405#issuecomment-590106498
      - "SMTP_ONLY=$SMTP_ONLY" # only enable sending messages (using postfix)
      - SPOOF_PROTECTION=1 # do not allow forged address
      # Email summary
      - PFLOGSUMM_TRIGGER=logrotate # Enables regular pflogsumm mail reports when logs are rotated
      - "PFLOGSUMM_RECIPIENT=$PFLOGSUMM_RECIPIENT" # Recipient address for pflogsumm reports.
      - "LOGROTATE_INTERVAL=$LOGROTATE_INTERVAL"
      # ClamAV conf
      - "ENABLE_CLAMAV=$ENABLE_CLAMAV"
      - "VIRUSMAILS_DELETE_DELAY=$VIRUSMAILS_DELETE_DELAY"
      # Postfix
      - "POSTMASTER_ADDRESS=$POSTMASTER_ADDRESS"
      - "POSTFIX_MAILBOX_SIZE_LIMIT=$POSTFIX_MAILBOX_SIZE_LIMIT" # Set the mailbox size limit for all users. If set to zero, the size will be unlimited (default).
      - "POSTFIX_MESSAGE_SIZE_LIMIT=$POSTFIX_MESSAGE_SIZE_LIMIT" # Set the message size limit for all users. If set to zero, the size will be unlimited (not recommended!), empty = 10Mb
      - POSTFIX_INET_PROTOCOLS=ipv4 # Only use ipv4 for accepting connections because of docker http://www.postfix.org/postconf.5.html#inet_protocols
      - "POSTSCREEN_ACTION=$POSTSCREEN_ACTION"
      # Dovecot
      - "DOVECOT_TLS=" # yes => LDAP over TLS enabled for Dovecot
      - DOVECOT_MAILBOX_FORMAT=maildir
      # Postgrey
      - "ENABLE_POSTGREY=$ENABLE_POSTGREY" # prevent spam using temp rejection of message
      - "POSTGREY_DELAY=$POSTGREY_DELAY"
      - "POSTGREY_MAX_AGE=$POSTGREY_MAX_AGE"
      - POSTGREY_TEXT=Delayed by postgrey
      - "POSTGREY_AUTO_WHITELIST_CLIENTS=$POSTGREY_AUTO_WHITELIST_CLIENTS"
      # SpamAssasin
      - "ENABLE_SPAMASSASSIN=$ENABLE_SPAMASSASSIN"
      - SA_TAG=2.0
      - SA_TAG2=6.31
      - SA_KILL=6.31
      - SA_SPAM_SUBJECT=***SPAM*****
      # Fetchmail
      - "ENABLE_FETCHMAIL=$ENABLE_FETCHMAIL"
      - "FETCHMAIL_POLL=$FETCHMAIL_POLL"
      # SSL
      - "SSL_TYPE=$SSL_TYPE"
      - "SSL_CERT_PATH=$SSL_CERT_PATH"
      - "SSL_KEY_PATH=$SSL_KEY_PATH"
      - "TLS_LEVEL=$TLS_LEVEL"
      # ManageSieve for automatic filtering on server side on port 4190
      - "ENABLE_MANAGESIEVE=$ENABLE_MANAGESIEVE"
      # SRS
      - ENABLE_SRS=0 # automatic forwarding is disabled
      - SRS_SENDER_CLASSES=envelope_sender
      - SRS_EXCLUDE_DOMAINS=
      - SRS_SECRET=
      # When using server as a relay, if not let empty
      - DEFAULT_RELAY_HOST=
      - RELAY_HOST=
      - RELAY_PORT=25
      - RELAY_USER=
      - RELAY_PASSWORD=
      # Fail2ban is not supported in swarm mode due to lack of cap_add: https://github.com/moby/moby/issues/25885
      - "ENABLE_FAIL2BAN=0"
      # SASL Auth
      - ENABLE_SASLAUTHD=0
    networks:
      - mailserver
    deploy:
      placement:
        constraints:
          - node.role == manager
          - node.labels.mailserver.mailserver-data == true
      labels:
{% if mailserver_ssl_use_traefik %}
        - "mailserver-traefik.renew.domain={{ mailserver_fqdn }}" # enable auto certificate renewal

        - traefik.enable=true
        - "traefik.docker.network={{ traefik_network }}"
        - "traefik.tags={{ traefik_public_tag }}"
        - "traefik.frontend.rule=Host:{{ mailserver_fqdn }}" # traefik ACME will handle creation of certificates for this domain
{% if rainloop_enabled %}
        - "traefik.frontend.redirect.replacement=https://{{ rainloop_domain }}/" # redirect access to smtp/imap domain to and other domain (e.g. webmail or autoconfig)
        - "traefik.frontend.redirect.regex=.*"
{% else %}
        # render 404 could be a possibility, todo : with traefik v2
{% endif %}

{% endif %}
      restart_policy:
        condition: on-failure
        delay: 5s
        window: 120s
        max_attempts: 3

{% if mailserver_ssl_use_traefik %}
  certs-traefik:
    image: youtous/mailserver-traefik:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - "TRAEFIK_VERSION=$SSL_TRAEFIK_VERSION"
      - "CERTS_SOURCE=$SSL_TRAEFIK_SOURCE"
      - "KV_ENDPOINTS=$SSL_TRAEFIK_KV_ENDPOINTS"
      - "DOMAINS={{ mailserver_fqdn }}"
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        window: 30s
        max_attempts: 3
    networks:
      - internal
{% if mailserver_kv_external_network|length %}
      - "{{ mailserver_kv_external_network }}"
{% endif %}
{% endif %}

{% if rainloop_enabled %}
  rainloop:
    image: youtous/rainloop:latest
    volumes:
      - rainloop-data:/rainloop/data
    networks:
      - mailserver
      - {{ traefik_network }}
    logging:
      options:
        # this tag is used by fail2ban using `journalctl CONTAINER_TAG=mailserver-rainloop`
        tag: "mailserver-rainloop"
    deploy:
      placement:
        constraints:
          - node.role == manager
          - node.labels.mailserver.rainloop-data == true
      restart_policy:
        condition: on-failure
        delay: 5s
        window: 30s
        max_attempts: 3
      labels:
        - traefik.enable=true
        - traefik.port=8888
        - "traefik.tags={{ traefik_public_tag }}"
        - "traefik.docker.network={{ traefik_network }}"

        # In this configuration, we use 3 segments labels :
        #   - traefik.redirectorservice.frontend : redirect http to https
        #   - traefik.webservice.frontend : it's the default frontend, used for webmail
        #   - traefik.admin.frontend : restrict admin panel for internal usage only

        # Traefik service that listens to HTTP
        - traefik.redirectorservice.frontend.entryPoints=http
        - traefik.redirectorservice.frontend.redirect.entryPoint=https
        # Traefik service that listens to HTTPS
        - traefik.webservice.frontend.entryPoints=https

        # Main Traefik service configuration (common for webservice and admin)
        - "traefik.frontend.rule=Host:{{ rainloop_domain }}"
        # HSTS
        - traefik.frontend.headers.SSLRedirect=true
        - "traefik.frontend.headers.SSLHost={{ rainloop_domain }}"
        - traefik.frontend.headers.STSSeconds=315360000
        - traefik.frontend.headers.STSIncludeSubdomains=true
        - traefik.frontend.headers.STSPreload=true
        # security labels
        - traefik.frontend.headers.browserXSSFilter=true
        - traefik.frontend.headers.frameDeny=true # deny iframes
        - traefik.frontend.headers.contentTypeNosniff=true
        # rate limits
        - traefik.frontend.rateLimit.extractorFunc=client.ip
        - traefik.frontend.rateLimit.rateSet.rate3s.period=3s
        - "traefik.frontend.rateLimit.rateSet.rate3s.average={{ rainloop_max_requests_3s_per_client|int }}"
        - "traefik.frontend.rateLimit.rateSet.rate3s.burst={{ rainloop_max_requests_3s_per_client * 2|int }}"
        # max connections limits
        - "traefik.backend.maxconn.amount={{ rainloop_max_connections|int }}"
        - traefik.backend.maxconn.extractorFunc=request.host
        # requests size limits: currently disabled due to a bug with 302 requests; todo fix it
        # - "traefik.backend.buffering.maxRequestBodyBytes={{ rainloop_max_request_size_megabytes * 1000000|int }}" # maximum request size allowed
        # - traefik.backend.buffering.memRequestBodyBytes=2097152 # after this limit, request will be buffered on disk instead of RAM
        # - traefik.backend.buffering.retryExpression=IsNetworkError() && Attempts() <= 2

        # Traefik service in charge of admin mailclien
        # Restrict admin with internal Auth     because '$' is evaluated, remember to escape it
        - "traefik.admin.frontend.rule=Host:{{ rainloop_domain }};Query: admin="
        - traefik.admin.frontend.entryPoints=https
        - "traefik.admin.frontend.auth.basic.users={{ backend_users|join(',') | replace('$', '$$') }}"
        - "traefik.admin.frontend.whiteList.sourceRange={{ trusted_backend_ips|join(',') }},127.0.0.1"
{% endif %}

{% if mailserver_enable_autodiscover %}
{% for mailserver in mailserver_domains %}
  autodiscover-email-settings:
    image: monogramm/autodiscover-email-settings:latest
    environment:
      - "COMPANY_NAME={{ mailserver.domain }}"
      - "SUPPORT_URL=https://autodiscover.{{ mailserver.domain }}"
      - "DOMAIN={{ mailserver.domain }}"
      - "IMAP_HOST=imap.{{ mailserver_fqdn }}"
      - IMAP_PORT=993
      - IMAP_SOCKET=SSL
      - "SMTP_HOST=smtp.{{ mailserver_fqdn }}"
      - SMTP_PORT=587
      - SMTP_SOCKET=STARTTLS
    networks:
      - {{ traefik_network }}
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        window: 30s
        max_attempts: 3
      labels:
        - traefik.enable=true
        - traefik.port=8000
        - "traefik.tags={{ traefik_public_tag }}"
        - "traefik.docker.network={{ traefik_network }}"

        # Traefik service that listens to HTTP
        - traefik.redirectorservice.frontend.entryPoints=http
        - traefik.redirectorservice.frontend.redirect.entryPoint=https
        # Traefik service that listens to HTTPS
        - traefik.webservice.frontend.entryPoints=https

        # Main Traefik service configuration
        - "traefik.frontend.rule=Host:autodiscover.{{ mailserver.domain }},autoconfig.{{ mailserver.domain }}"
        # HSTS
        - traefik.frontend.headers.SSLRedirect=true
        - "traefik.frontend.headers.SSLHost=autodiscover.{{ mailserver.domain }}"
        - traefik.frontend.headers.STSSeconds=315360000
        - traefik.frontend.headers.STSIncludeSubdomains=true
        - traefik.frontend.headers.STSPreload=true
        # security labels
        - traefik.frontend.headers.browserXSSFilter=true
        - traefik.frontend.headers.frameDeny=true # deny iframes
        - traefik.frontend.headers.contentTypeNosniff=true
        # rate limits
        - traefik.frontend.rateLimit.extractorFunc=client.ip
        - traefik.frontend.rateLimit.rateSet.rate3s.period=3s
        - "traefik.frontend.rateLimit.rateSet.rate3s.average={{ mailserver_autodiscover_max_requests_3s_per_client|int }}"
        - "traefik.frontend.rateLimit.rateSet.rate3s.burst={{ mailserver_autodiscover_max_requests_3s_per_client * 2|int }}"
        # max connections limits
        - "traefik.backend.maxconn.amount={{ mailserver_autodiscover_max_connections|int }}"
        - traefik.backend.maxconn.extractorFunc=request.host
{% endfor %}
{% endif %}


networks:
  internal:
    internal: true
  mailserver:
    driver: overlay
    driver_opts:
      encrypted: ""
{% if mailserver_ssl_use_traefik and mailserver_kv_external_network|length %}
  {{ mailserver_kv_external_network }}:
    external: true
{% endif %}
{% if rainloop_enabled or mailserver_enable_autodiscover %}
  {{ traefik_network }}:
    external: true
{% endif %}

volumes:
  mailserver-data:
    driver: local
  mailserver-state:
    driver: local
{% if rainloop_enabled %}
  rainloop-data:
    driver: local
{% endif %}