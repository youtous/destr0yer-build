---
# This role setup a Mailserver in a docker swarm cluster
# see https://github.com/tomav/docker-mailserver for more details

- name: "Ensure mail services are disabled"
  become: yes
  service:
    name: "{{ item }}"
    enabled: no
    state: stopped
  ignore_errors: True
  with_items:
    - postfix
    - exim4

- name: Ensure mailserver directory exists
  file:
    state: directory
    path: "{{ mailserver_compose_file_dest_directory }}"

- name: Register deployment timestamp
  set_fact:
    mailserver_deploy_timestamp: "{{ ansible_date_time.epoch }}"

- name: Tag current node as mailserver origin
  docker_node:
    hostname: "{{ hostname }}"
    labels:
      mailserver.mailserver-data: "true"

- name: Tag current node as rainloop origin
  docker_node:
    hostname: "{{ hostname }}"
    labels:
      mailserver.rainloop-data: "true"
  when: rainloop_enabled

- name: Fail2ban for mailserver (rainloop, mailserver)
  import_tasks: fail2ban.yml
  when: mailserver_enable_host_fail2ban

- name: Copy mailserver stack
  template:
    src: templates/docker-compose.mailserver.j2.yml
    dest: "{{ mailserver_compose_file_dest }}"
    mode: u=rw,g=,o=

- name: Ensure mailserver config directory exists
  file:
    state: directory
    path: "{{ mailserver_compose_file_dest_directory }}/{{ item }}"
  with_items:
    - config
    - config/opendkim

- name: Copy mailserver config
  template:
    src: "templates/config/{{ item.src }}"
    dest: "{{ mailserver_compose_file_dest_directory }}/config/{{ item.dest }}"
    mode: u=rw,g=,o=
  with_items:
    - src: opendkim/KeyTable.j2
      dest: opendkim/KeyTable
    - src: opendkim/SigningTable.j2
      dest: opendkim/SigningTable
    - src: postfix-receive-access.cf.j2
      dest: postfix-receive-access.cf
    - src: postfix-send-access.cf.j2
      dest: postfix-send-access.cf
    - src: postfix-relaymap.cf.j2
      dest: postfix-relaymap.cf
    - src: postfix-virtual.cf.j2
      dest: postfix-virtual.cf
    - src: postfix-regexp.cf.j2
      dest: postfix-regexp.cf
    - src: whitelist_clients.local.j2
      dest: whitelist_clients.local

- name: Register mailserver secrets
  import_tasks: secrets.yml

- name: Deploy mailserver
  docker_stack:
    state: present
    prune: yes
    name: "{{ docker_mailserver_stack_name }}"
    compose:
      - "{{ mailserver_compose_file_dest }}"
  environment:
    DMS_DEBUG: "{{ mailserver_debug|default(false)|int }}"
    PERMIT_DOCKER: "{{ mailserver_allowed_networks }}"
    SMTP_ONLY: "{{ mailserver_only_smtp|default(false)|int }}"

    OVERRIDE_HOSTNAME: "{{ mailserver_hostname }}"

    PFLOGSUMM_RECIPIENT: "{{ mailserver_reporting_recipient }}"
    LOGROTATE_INTERVAL: "{{ mailserver_reporting_interval }}"

    ENABLE_CLAMAV: "{{ mailserver_enable_clamav|default(false)|int }}"
    VIRUSMAILS_DELETE_DELAY: "{{ mailserver_virus_delete_delay }}"

    POSTMASTER_ADDRESS: "{{ mailserver_postmaster_address }}"
    POSTFIX_MAILBOX_SIZE_LIMIT: "{{ mailserver_default_mailbox_limit_mb * 1000000|int }}"
    POSTFIX_MESSAGE_SIZE_LIMIT: "{{ mailserver_message_size_limit_mb * 1000000|int }}"
    POSTSCREEN_ACTION: "{{ mailserver_postscreen_action }}"

    ENABLE_POSTGREY: "{{ mailserver_enable_postgrey|default(true)|int }}"
    POSTGREY_DELAY: "{{ mailserver_postgrey_delay|default(300) }}"
    POSTGREY_MAX_AGE: "{{ mailserver_postgrey_max_age|default(35) }}"
    POSTGREY_AUTO_WHITELIST_CLIENTS: "{{ mailserver_postgrey_auto_whitelist|default(5) }}"

    ENABLE_SPAMASSASSIN: "{{ mailserver_enable_spamassassin|default(true)|int }}"

    ENABLE_FETCHMAIL: "{{ mailserver_enable_fetchmail|default(false)|int }}"
    FETCHMAIL_POLL: "{{ mailserver_fetchmail_poll_interval|default(300) }}"

    SSL_TYPE: "{{ mailserver_ssl_type }}"
    TLS_LEVEL: "{{ mailserver_tls_level }}"

    ENABLE_MANAGESIEVE: "{{ mailserver_enable_managesieve|default(true)|int }}"

    ENABLE_FAIL2BAN: "{{ mailserver_enable_fail2ban|default(true)|int }}"

    # deploy timestamp
    DEPLOY_TIMESTAMP: "{{ mailserver_deploy_timestamp }}"
  notify: docker prune
...