---
# Prometheus variables
# See: https://artifacthub.io/packages/helm/prometheus-community/kube-prometheus-stack

k3s_promgraf_kube_prometheus_stack_chart_version: "50.3.0"
# yamllint disable rule:line-length
k3s_promgraf_kube_prometheus_stack_chart_download_url:
  "https://github.com/prometheus-community/helm-charts/releases/download/kube-prometheus-stack-{{ k3s_promgraf_kube_prometheus_stack_chart_version }}/kube-prometheus-stack-{{ k3s_promgraf_kube_prometheus_stack_chart_version }}.tgz"
# yamllint enable rule:line-length
k3s_promgraf_kube_prometheus_stack_chart_sha256sum: "a5fae704f2e591e04cb38df3a4c85bf8ef81c9a165d3b98d7e77f59a5ae8069d"


k3s_promgraf_helm_release_name: kube-prometheus-stack

k3s_promgraf_k8s_namespace: promgraf

k3s_promgraf_basic_auth_secret_name: "promgraf-basic-auth"
k3s_promgraf_basic_auth_users: "{{ backend_users | default([]) }}"
# - username: myuser
#   password: myencryptedpassword

# SMTP paramaters
k3s_promgraf_smtp_user: "user"
k3s_promgraf_smtp_password: ""
k3s_promgraf_smtp_starttls_policy: "MandatoryStartTLS"
k3s_promgraf_smtp_host: "localhost:25"
k3s_promgraf_smtp_from_address: "local@local.dv"
k3s_promgraf_smtp_from_name: "PromGraf"
k3s_promgraf_alert_to_email: "{{ monitoring_email }}"

# domains
k3s_promgraf_prometheus_domain: "prom.{{ k8s_base_cluster_domain }}"
k3s_promgraf_grafana_domain: "grafana.{{ k8s_base_cluster_domain }}"
k3s_promgraf_alertmanager_domain: "alertmanager.{{ k8s_base_cluster_domain }}"

# Admin login parameters
k3s_promgraf_admin_user: "admin"
k3s_promgraf_admin_password: ""

k3s_promgraf_k8s_helm_values:

  alertmanager:
    ingress:
      enabled: true
      ingressClassName: haproxy

      annotations:
        # TODO : replace by allow-list when it will work, until use whitelist
        # ensure that at least one ip exists in the whitelist, otherwise all ips are allowed
        haproxy.org/whitelist: "{{ (trusted_backend_ips + ['127.0.0.1'] | flatten) | join(', ') }}"
        # protect with additional basic auth
        haproxy.org/auth-type: basic-auth
        haproxy.org/auth-realm: "Admin Area"
        haproxy.org/auth-secret: "{{ k3s_promgraf_basic_auth_secret_name }}"

        haproxy.org/load-balance: "roundrobin"

        # overrides defaults
        # yamllint disable rule:line-length
        haproxy.org/response-set-header: |
          Content-Security-Policy \"default-src 'self'; script-src 'self' 'unsafe-inline'; img-src 'self' data: 'self'; style-src 'self' 'unsafe-inline'; font-src 'self' data:; frame-ancestors 'self'; frame-src 'self'; object-src 'none';\"
        # yamllint enable rule:line-length


      # tls
      issuer:
        scope: cluster
        name: "{{ k3s_promgraf_tls_issuer_name }}"

      secretName: "{{ k3s_promgraf_alertmanager_tls_secret_name }}" # cert name for certmanager
      hosts:
        - "{{ k3s_promgraf_alertmanager_domain }}" # adapt to your needs
    ## Alertmanager configuration directives
    ## ref: https://prometheus.io/docs/alerting/configuration/#configuration-file
    ##      https://prometheus.io/webtools/alerting/routing-tree-editor/
    ##
    config:
      global:
        resolve_timeout: 5m

        # The smarthost and SMTP sender used for mail notifications.
        smtp_from: '{{ k3s_promgraf_smtp_from_name }}'
        smtp_smarthost: '{{ k3s_promgraf_smtp_host }}'
        smtp_auth_username: '{{ k3s_promgraf_smtp_user }}'
        smtp_auth_password: '{{ k3s_promgraf_smtp_password }}'
        smtp_require_tls: true

      inhibit_rules:
        - source_matchers:
            - 'severity = critical'
          target_matchers:
            - 'severity =~ warning|info'
          equal:
            - 'namespace'
            - 'alertname'
        - source_matchers:
            - 'severity = warning'
          target_matchers:
            - 'severity = info'
          equal:
            - 'namespace'
            - 'alertname'
        - source_matchers:
            - 'alertname = InfoInhibitor'
          target_matchers:
            - 'severity = info'
          equal:
            - 'namespace'
      route:
        group_by: ['namespace']
        group_wait: 30s
        group_interval: 5m
        repeat_interval: 12h
        receiver: 'email'
        routes:
          - receiver: 'null'
            matchers:
              - alertname =~ "InfoInhibitor|Watchdog"
      receivers:
        - name: 'null'
        - name: 'email'
          email_configs:
            - to: '{{ k3s_promgraf_alert_to_email }}'
      templates:
        - '/etc/alertmanager/config/*.tmpl'

  grafana:
    ingress:
      enabled: true
      ingressClassName: haproxy

      annotations:
        # TODO : replace by allow-list when it will work, until use whitelist
        # ensure that at least one ip exists in the whitelist, otherwise all ips are allowed
        haproxy.org/whitelist: "{{ (trusted_backend_ips + ['127.0.0.1'] | flatten) | join(', ') }}"

        haproxy.org/load-balance: "roundrobin"

        # overrides defaults
        # yamllint disable rule:line-length
        haproxy.org/response-set-header: |
          Content-Security-Policy \"default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; img-src 'self' data: 'self'; style-src 'self' 'unsafe-inline'; font-src 'self' data:; frame-ancestors 'self'; frame-src 'self'; object-src 'none';\"
        # yamllint enable rule:line-length


      # tls
      issuer:
        scope: cluster
        name: "{{ k3s_promgraf_tls_issuer_name }}"


      secretName: "{{ k3s_promgraf_grafana_tls_secret_name }}" # cert name for certmanager
      hosts:
        - "{{ k3s_promgraf_grafana_domain }}" # adapt to your needs

    adminUser: "{{ k3s_promgraf_admin_user }}"
    adminPassword: "{{ k3s_promgraf_admin_password }}"

    grafana.ini:
      smtp:
        enabled: true
        host: "{{ k3s_promgraf_smtp_host }}"
        from_address: "{{ k3s_promgraf_smtp_from_address }}"
        from_name: "{{ k3s_promgraf_smtp_from_name }}"
        startTLS_policy: "{{ k3s_promgraf_smtp_starttls_policy }}"
        # SMTP config follows here as per
        # https://grafana.com/docs/grafana/latest/administration/configuration/#smtp

    smtp:
      existingSecret: "promgraf-smtp-auth"
      userKey: "user"
      passwordKey: "password"

  prometheus:
    ingress:
      enabled: true
      ingressClassName: haproxy

      annotations:
        # TODO : replace by allow-list when it will work, until use whitelist
        # ensure that at least one ip exists in the whitelist, otherwise all ips are allowed
        haproxy.org/whitelist: "{{ (trusted_backend_ips + ['127.0.0.1'] | flatten) | join(', ') }}"
        # protect with additional basic auth
        haproxy.org/auth-type: basic-auth
        haproxy.org/auth-realm: "Admin Area"
        haproxy.org/auth-secret: "{{ k3s_promgraf_basic_auth_secret_name }}"

        haproxy.org/load-balance: "roundrobin"

        # overrides defaults
        # yamllint disable rule:line-length
        haproxy.org/response-set-header: |
          Content-Security-Policy \"default-src 'self'; script-src 'self' 'unsafe-inline'; img-src 'self' data: 'self'; style-src 'self' 'unsafe-inline'; font-src 'self' data:; frame-ancestors 'self'; frame-src 'self'; object-src 'none';\"
        # yamllint enable rule:line-length


      # tls
      issuer:
        scope: cluster
        name: "{{ k3s_promgraf_tls_issuer_name }}"

      # One should use its own cert in production
      secretName: "{{ k3s_promgraf_prometheus_tls_secret_name }}" # cert name for certmanager
      hosts:
        - "{{ k3s_promgraf_prometheus_domain }}" # adapt to your needs

  extraManifests:
    - apiVersion: cert-manager.io/v1
      kind: Certificate
      metadata:
        name: "{{ k3s_promgraf_prometheus_tls_secret_name }}"
        namespace: "{{ k3s_promgraf_k8s_namespace }}"
      spec:
        secretName: "{{ k3s_promgraf_prometheus_tls_secret_name }}"
        issuerRef:
          name: "{{ k3s_promgraf_tls_issuer_name }}"
          kind: ClusterIssuer
        dnsNames:
          - "{{ k3s_promgraf_prometheus_domain }}"
        privateKey:
          algorithm: RSA
          size: 4096
          rotationPolicy: Always # ðŸ”° Here.

    - apiVersion: cert-manager.io/v1
      kind: Certificate
      metadata:
        name: "{{ k3s_promgraf_grafana_tls_secret_name }}"
        namespace: "{{ k3s_promgraf_k8s_namespace }}"
      spec:
        secretName: "{{ k3s_promgraf_grafana_tls_secret_name }}"
        issuerRef:
          name: "{{ k3s_promgraf_tls_issuer_name }}"
          kind: ClusterIssuer
        dnsNames:
          - "{{ k3s_promgraf_grafana_domain }}"
        privateKey:
          algorithm: RSA
          size: 4096
          rotationPolicy: Always # ðŸ”° Here.

    - apiVersion: cert-manager.io/v1
      kind: Certificate
      metadata:
        name: "{{ k3s_promgraf_alertmanager_tls_secret_name }}"
        namespace: "{{ k3s_promgraf_k8s_namespace }}"
      spec:
        secretName: "{{ k3s_promgraf_alertmanager_tls_secret_name }}"
        issuerRef:
          name: "{{ k3s_promgraf_tls_issuer_name }}"
          kind: ClusterIssuer
        dnsNames:
          - "{{ k3s_promgraf_alertmanager_domain }}"
        privateKey:
          algorithm: RSA
          size: 4096
          rotationPolicy: Always # ðŸ”° Here.

  ## Deploy node exporter as a daemonset to all nodes
  ##
  nodeExporter:
    enabled: true
    operatingSystems:
      linux:
        enabled: true

# TODO : later, add karma to the stack
# TODO : later exploit
# - setup backup
# - limit storage
# - audit security
k3s_promgraf_tls_issuer_name: "letsencrypt"
k3s_promgraf_prometheus_tls_secret_name: "prometheus-tls-ingress-cert"
k3s_promgraf_grafana_tls_secret_name: "grafana-tls-ingress-cert"
k3s_promgraf_alertmanager_tls_secret_name: "alertmanager-tls-ingress-cert"

k3s_promgraf_helm_show_commands: true

# kube config
k3s_promgraf_kubeconfig_path: "{{ ansible_env.HOME }}/.kube/config"
...
