---
# This play a docker swarm cluster.


- name: Install docker on all systems
  hosts: all
  roles:
    - docker
    - monit_docker
  vars_files:
    - secret_vars/all.yml
    - task_vars/sudo.yml
    - "secret_vars/{{ inventory_hostname }}.yml"
  tags: ["docker-setup", "docker-swarm-setup", "docker-swarm-init"]

- name: Configure docker in swarm mode on all systems
  hosts: all
  serial: 1 # configure one by one each host in case of reboot
  roles:
    - docker_configure
    - docker_prune_daily
  vars_files:
    - secret_vars/all.yml
    - task_vars/sudo.yml
    - "secret_vars/{{ inventory_hostname }}.yml"
  tags: ["docker-swarm-setup", "docker-swarm-init"]


- name: Initiate the primary manager
  hosts: swarm_primary_manager
  roles:
    - docker_initiate_swarm
  vars_files:
    - secret_vars/all.yml
    - task_vars/sudo.yml
    - "secret_vars/{{ inventory_hostname }}.yml"
  tags: ["docker-swarm-init"]

- name: Initiate managers
  hosts: swarm_managers
  roles:
    - docker_initiate_managers
  vars_files:
    - secret_vars/all.yml
    - task_vars/sudo.yml
    - "secret_vars/{{ inventory_hostname }}.yml"
  tags: ["docker-swarm-init"]

- name: Initiate workers
  hosts: swarm_workers
  roles:
    - docker_initiate_workers
  vars_files:
    - secret_vars/all.yml
    - task_vars/sudo.yml
    - "secret_vars/{{ inventory_hostname }}.yml"
  tags: ["docker-swarm-init"]

- name: Cleanup swarm init
  hosts: localhost
  tasks:
    - name: Refresh inventory
      ansible.builtin.meta: refresh_inventory
  tags: ["docker-swarm-init", "docker-swarm-init-cleanup"]

- name: Integrate fail2ban for docker (recidive)
  hosts: all
  roles:
    - docker_fail2ban
  vars_files:
    - secret_vars/all.yml
    - task_vars/sudo.yml
    - "secret_vars/{{ inventory_hostname }}.yml"
  tags: ["docker_fail2ban"]

- name: Setup auto-restore DOCKER-USER chain
  hosts: all
  roles:
    - docker_user_chain
  vars_files:
    - secret_vars/all.yml
    - task_vars/sudo.yml
    - "secret_vars/{{ inventory_hostname }}.yml"
  tags: ["docker_user_chain"]

- name: Setup docker common tools
  hosts: all
  roles:
    - docker_ctop_cmd
  vars_files:
    - secret_vars/all.yml
    - task_vars/sudo.yml
    - "secret_vars/{{ inventory_hostname }}.yml"
  tags: ["docker-common-tools"]

- name: Setup docker backup tools
  hosts: all
  roles:
    - docker_backup_mysql
    - docker_backup_volumes
  vars_files:
    - secret_vars/all.yml
    - task_vars/sudo.yml
    - "secret_vars/{{ inventory_hostname }}.yml"
  tags: ["docker-backup-tools"]

- name: Setup caddy reverse-proxy with consul
  hosts: swarm_primary_manager # we use the primary_manager as an entrypoint, docker-swarm will handle replicas if needed
  roles:
    - docker_caddy_consul # smart reverse proxy for docker swarm
  vars_files:
    - secret_vars/all.yml
    - task_vars/sudo.yml
    - "secret_vars/{{ inventory_hostname }}.yml"
  tags: ["caddy", "caddy-stack"]

- name: Setup caddy additionals on managers | fail2ban, firewall
  hosts: [swarm_managers, swarm_primary_manager]
  tasks:
    - ansible.builtin.include_role:
        name: docker_caddy_consul
        tasks_from: fail2ban
    - ansible.builtin.include_role:
        name: docker_caddy_consul
        tasks_from: firewall
  vars_files:
    - secret_vars/all.yml
    - task_vars/sudo.yml
    - "secret_vars/{{ inventory_hostname }}.yml"
  tags: ["caddy", "caddy-f2b", "caddy-firewall"]

- name: Setup traefik reverse-proxy
  hosts: swarm_primary_manager # we use the primary_manager as an entrypoint, docker-swarm will handle replicas if needed
  roles:
    - docker_traefik # L4 smart reverse proxy for docker swarm
  vars_files:
    - secret_vars/all.yml
    - task_vars/sudo.yml
    - "secret_vars/{{ inventory_hostname }}.yml"
  tags: ["traefik"]

- name: Setup traefik additionals on managers | firewall
  hosts: [swarm_managers, swarm_primary_manager]
  tasks:
    - name: Setup traefik firewall
      ansible.builtin.include_role:
        name: docker_traefik
        tasks_from: firewall
  vars_files:
    - secret_vars/all.yml
    - task_vars/sudo.yml
    - "secret_vars/{{ inventory_hostname }}.yml"
  tags: ["traefik", "traefik-firewall"]

- name: Setup swarm_cronjon
  hosts: swarm_primary_manager
  roles:
    - docker_swarm_cronjob
  vars_files:
    - secret_vars/all.yml
    - task_vars/sudo.yml
    - "secret_vars/{{ inventory_hostname }}.yml"
  tags: ["cronjob"]

- name: Setup docker-swarm portainer
  hosts: swarm_primary_manager
  roles:
    - docker_portainer # web manager of the cluster
  vars_files:
    - secret_vars/all.yml
    - task_vars/sudo.yml
    - "secret_vars/{{ inventory_hostname }}.yml"
  tags: ["portainer"]

- name: Setup promgraf stack
  hosts: swarm_primary_manager
  roles:
    - docker_promgraf
  vars_files:
    - secret_vars/all.yml
    - task_vars/sudo.yml
    - "secret_vars/{{ inventory_hostname }}.yml"
  tags: ["metrics", "promgraf"]

- name: Setup docker-swarm metrics
  hosts: swarm_primary_manager
  roles:
    - docker_cadvisor
  vars_files:
    - secret_vars/all.yml
    - task_vars/sudo.yml
    - "secret_vars/{{ inventory_hostname }}.yml"
  tags: ["metrics", "cadvisor"]

- name: Setup docker-swarm metrics
  hosts: all
  roles:
    - docker_node_exporter
  vars_files:
    - secret_vars/all.yml
    - task_vars/sudo.yml
    - "secret_vars/{{ inventory_hostname }}.yml"
  tags: ["metrics", "node_exporter"]

- name: Include elastic cluster setup
  import_playbook: 90-elastic.yml

- name: Include mailserver deployment for regenerating firewall rules
  import_playbook: 90-mailserver.yml

- name: Include nextcloud deployment (just in case :)) # ufw rules
  import_playbook: 90-nextcloud.yml

- name: Include teamspeak deployment (just in case :)) # potential ufw rules (not yet used)
  import_playbook: 90-teamspeak.yml
...
